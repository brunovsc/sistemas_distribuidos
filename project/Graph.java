/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package graphservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Graph {

  public interface Iface {

    public boolean createVertice(int nome, int cor, double peso, String descricao) throws KeyAlreadyUsed, ResourceInUse, org.apache.thrift.TException;

    public boolean deleteVertice(int key) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException;

    public boolean updateVertice(int nome, int cor, double peso, String descricao) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException;

    public Vertice readVertice(int key) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException;

    public boolean createAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao) throws KeyAlreadyUsed, ResourceInUse, org.apache.thrift.TException;

    public boolean deleteAresta(int vertice1, int vertice2) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException;

    public boolean updateAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException;

    public Aresta readAresta(int vertice1, int vertice2) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException;

    public List<Vertice> listVerticesFromAresta(int vertice1, int vertice2) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException;

    public List<Aresta> listArestasFromVertice(int nome) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException;

    public List<Vertice> listNeighbors(int nome) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException;

    public List<Vertice> listVertices() throws org.apache.thrift.TException;

    public List<Aresta> listArestas() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createVertice(int nome, int cor, double peso, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteVertice(int key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateVertice(int nome, int cor, double peso, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readVertice(int key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteAresta(int vertice1, int vertice2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readAresta(int vertice1, int vertice2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listVerticesFromAresta(int vertice1, int vertice2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listArestasFromVertice(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listNeighbors(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listVertices(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listArestas(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean createVertice(int nome, int cor, double peso, String descricao) throws KeyAlreadyUsed, ResourceInUse, org.apache.thrift.TException
    {
      send_createVertice(nome, cor, peso, descricao);
      return recv_createVertice();
    }

    public void send_createVertice(int nome, int cor, double peso, String descricao) throws org.apache.thrift.TException
    {
      createVertice_args args = new createVertice_args();
      args.setNome(nome);
      args.setCor(cor);
      args.setPeso(peso);
      args.setDescricao(descricao);
      sendBase("createVertice", args);
    }

    public boolean recv_createVertice() throws KeyAlreadyUsed, ResourceInUse, org.apache.thrift.TException
    {
      createVertice_result result = new createVertice_result();
      receiveBase(result, "createVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kau != null) {
        throw result.kau;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createVertice failed: unknown result");
    }

    public boolean deleteVertice(int key) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      send_deleteVertice(key);
      return recv_deleteVertice();
    }

    public void send_deleteVertice(int key) throws org.apache.thrift.TException
    {
      deleteVertice_args args = new deleteVertice_args();
      args.setKey(key);
      sendBase("deleteVertice", args);
    }

    public boolean recv_deleteVertice() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      deleteVertice_result result = new deleteVertice_result();
      receiveBase(result, "deleteVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteVertice failed: unknown result");
    }

    public boolean updateVertice(int nome, int cor, double peso, String descricao) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      send_updateVertice(nome, cor, peso, descricao);
      return recv_updateVertice();
    }

    public void send_updateVertice(int nome, int cor, double peso, String descricao) throws org.apache.thrift.TException
    {
      updateVertice_args args = new updateVertice_args();
      args.setNome(nome);
      args.setCor(cor);
      args.setPeso(peso);
      args.setDescricao(descricao);
      sendBase("updateVertice", args);
    }

    public boolean recv_updateVertice() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      updateVertice_result result = new updateVertice_result();
      receiveBase(result, "updateVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateVertice failed: unknown result");
    }

    public Vertice readVertice(int key) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      send_readVertice(key);
      return recv_readVertice();
    }

    public void send_readVertice(int key) throws org.apache.thrift.TException
    {
      readVertice_args args = new readVertice_args();
      args.setKey(key);
      sendBase("readVertice", args);
    }

    public Vertice recv_readVertice() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      readVertice_result result = new readVertice_result();
      receiveBase(result, "readVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readVertice failed: unknown result");
    }

    public boolean createAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao) throws KeyAlreadyUsed, ResourceInUse, org.apache.thrift.TException
    {
      send_createAresta(vertice1, vertice2, peso, direcionado, descricao);
      return recv_createAresta();
    }

    public void send_createAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao) throws org.apache.thrift.TException
    {
      createAresta_args args = new createAresta_args();
      args.setVertice1(vertice1);
      args.setVertice2(vertice2);
      args.setPeso(peso);
      args.setDirecionado(direcionado);
      args.setDescricao(descricao);
      sendBase("createAresta", args);
    }

    public boolean recv_createAresta() throws KeyAlreadyUsed, ResourceInUse, org.apache.thrift.TException
    {
      createAresta_result result = new createAresta_result();
      receiveBase(result, "createAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kau != null) {
        throw result.kau;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAresta failed: unknown result");
    }

    public boolean deleteAresta(int vertice1, int vertice2) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      send_deleteAresta(vertice1, vertice2);
      return recv_deleteAresta();
    }

    public void send_deleteAresta(int vertice1, int vertice2) throws org.apache.thrift.TException
    {
      deleteAresta_args args = new deleteAresta_args();
      args.setVertice1(vertice1);
      args.setVertice2(vertice2);
      sendBase("deleteAresta", args);
    }

    public boolean recv_deleteAresta() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      deleteAresta_result result = new deleteAresta_result();
      receiveBase(result, "deleteAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAresta failed: unknown result");
    }

    public boolean updateAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      send_updateAresta(vertice1, vertice2, peso, direcionado, descricao);
      return recv_updateAresta();
    }

    public void send_updateAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao) throws org.apache.thrift.TException
    {
      updateAresta_args args = new updateAresta_args();
      args.setVertice1(vertice1);
      args.setVertice2(vertice2);
      args.setPeso(peso);
      args.setDirecionado(direcionado);
      args.setDescricao(descricao);
      sendBase("updateAresta", args);
    }

    public boolean recv_updateAresta() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      updateAresta_result result = new updateAresta_result();
      receiveBase(result, "updateAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAresta failed: unknown result");
    }

    public Aresta readAresta(int vertice1, int vertice2) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      send_readAresta(vertice1, vertice2);
      return recv_readAresta();
    }

    public void send_readAresta(int vertice1, int vertice2) throws org.apache.thrift.TException
    {
      readAresta_args args = new readAresta_args();
      args.setVertice1(vertice1);
      args.setVertice2(vertice2);
      sendBase("readAresta", args);
    }

    public Aresta recv_readAresta() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      readAresta_result result = new readAresta_result();
      receiveBase(result, "readAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readAresta failed: unknown result");
    }

    public List<Vertice> listVerticesFromAresta(int vertice1, int vertice2) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      send_listVerticesFromAresta(vertice1, vertice2);
      return recv_listVerticesFromAresta();
    }

    public void send_listVerticesFromAresta(int vertice1, int vertice2) throws org.apache.thrift.TException
    {
      listVerticesFromAresta_args args = new listVerticesFromAresta_args();
      args.setVertice1(vertice1);
      args.setVertice2(vertice2);
      sendBase("listVerticesFromAresta", args);
    }

    public List<Vertice> recv_listVerticesFromAresta() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      listVerticesFromAresta_result result = new listVerticesFromAresta_result();
      receiveBase(result, "listVerticesFromAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listVerticesFromAresta failed: unknown result");
    }

    public List<Aresta> listArestasFromVertice(int nome) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      send_listArestasFromVertice(nome);
      return recv_listArestasFromVertice();
    }

    public void send_listArestasFromVertice(int nome) throws org.apache.thrift.TException
    {
      listArestasFromVertice_args args = new listArestasFromVertice_args();
      args.setNome(nome);
      sendBase("listArestasFromVertice", args);
    }

    public List<Aresta> recv_listArestasFromVertice() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      listArestasFromVertice_result result = new listArestasFromVertice_result();
      receiveBase(result, "listArestasFromVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listArestasFromVertice failed: unknown result");
    }

    public List<Vertice> listNeighbors(int nome) throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      send_listNeighbors(nome);
      return recv_listNeighbors();
    }

    public void send_listNeighbors(int nome) throws org.apache.thrift.TException
    {
      listNeighbors_args args = new listNeighbors_args();
      args.setNome(nome);
      sendBase("listNeighbors", args);
    }

    public List<Vertice> recv_listNeighbors() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException
    {
      listNeighbors_result result = new listNeighbors_result();
      receiveBase(result, "listNeighbors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      if (result.riu != null) {
        throw result.riu;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listNeighbors failed: unknown result");
    }

    public List<Vertice> listVertices() throws org.apache.thrift.TException
    {
      send_listVertices();
      return recv_listVertices();
    }

    public void send_listVertices() throws org.apache.thrift.TException
    {
      listVertices_args args = new listVertices_args();
      sendBase("listVertices", args);
    }

    public List<Vertice> recv_listVertices() throws org.apache.thrift.TException
    {
      listVertices_result result = new listVertices_result();
      receiveBase(result, "listVertices");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listVertices failed: unknown result");
    }

    public List<Aresta> listArestas() throws org.apache.thrift.TException
    {
      send_listArestas();
      return recv_listArestas();
    }

    public void send_listArestas() throws org.apache.thrift.TException
    {
      listArestas_args args = new listArestas_args();
      sendBase("listArestas", args);
    }

    public List<Aresta> recv_listArestas() throws org.apache.thrift.TException
    {
      listArestas_result result = new listArestas_result();
      receiveBase(result, "listArestas");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listArestas failed: unknown result");
    }

  }
 /*
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createVertice(int nome, int cor, double peso, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createVertice_call method_call = new createVertice_call(nome, cor, peso, descricao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nome;
      private int cor;
      private double peso;
      private String descricao;
      public createVertice_call(int nome, int cor, double peso, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
        this.cor = cor;
        this.peso = peso;
        this.descricao = descricao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createVertice_args args = new createVertice_args();
        args.setNome(nome);
        args.setCor(cor);
        args.setPeso(peso);
        args.setDescricao(descricao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws KeyAlreadyUsed, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createVertice();
      }
    }

    public void deleteVertice(int key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteVertice_call method_call = new deleteVertice_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int key;
      public deleteVertice_call(int key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteVertice_args args = new deleteVertice_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteVertice();
      }
    }

    public void updateVertice(int nome, int cor, double peso, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateVertice_call method_call = new updateVertice_call(nome, cor, peso, descricao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nome;
      private int cor;
      private double peso;
      private String descricao;
      public updateVertice_call(int nome, int cor, double peso, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
        this.cor = cor;
        this.peso = peso;
        this.descricao = descricao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateVertice_args args = new updateVertice_args();
        args.setNome(nome);
        args.setCor(cor);
        args.setPeso(peso);
        args.setDescricao(descricao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateVertice();
      }
    }

    public void readVertice(int key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readVertice_call method_call = new readVertice_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int key;
      public readVertice_call(int key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readVertice_args args = new readVertice_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Vertice getResult() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readVertice();
      }
    }

    public void createAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAresta_call method_call = new createAresta_call(vertice1, vertice2, peso, direcionado, descricao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertice1;
      private int vertice2;
      private double peso;
      private boolean direcionado;
      private String descricao;
      public createAresta_call(int vertice1, int vertice2, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertice1 = vertice1;
        this.vertice2 = vertice2;
        this.peso = peso;
        this.direcionado = direcionado;
        this.descricao = descricao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAresta_args args = new createAresta_args();
        args.setVertice1(vertice1);
        args.setVertice2(vertice2);
        args.setPeso(peso);
        args.setDirecionado(direcionado);
        args.setDescricao(descricao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws KeyAlreadyUsed, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAresta();
      }
    }

    public void deleteAresta(int vertice1, int vertice2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAresta_call method_call = new deleteAresta_call(vertice1, vertice2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertice1;
      private int vertice2;
      public deleteAresta_call(int vertice1, int vertice2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertice1 = vertice1;
        this.vertice2 = vertice2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAresta_args args = new deleteAresta_args();
        args.setVertice1(vertice1);
        args.setVertice2(vertice2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAresta();
      }
    }

    public void updateAresta(int vertice1, int vertice2, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAresta_call method_call = new updateAresta_call(vertice1, vertice2, peso, direcionado, descricao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertice1;
      private int vertice2;
      private double peso;
      private boolean direcionado;
      private String descricao;
      public updateAresta_call(int vertice1, int vertice2, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertice1 = vertice1;
        this.vertice2 = vertice2;
        this.peso = peso;
        this.direcionado = direcionado;
        this.descricao = descricao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAresta_args args = new updateAresta_args();
        args.setVertice1(vertice1);
        args.setVertice2(vertice2);
        args.setPeso(peso);
        args.setDirecionado(direcionado);
        args.setDescricao(descricao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAresta();
      }
    }

    public void readAresta(int vertice1, int vertice2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readAresta_call method_call = new readAresta_call(vertice1, vertice2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertice1;
      private int vertice2;
      public readAresta_call(int vertice1, int vertice2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertice1 = vertice1;
        this.vertice2 = vertice2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readAresta_args args = new readAresta_args();
        args.setVertice1(vertice1);
        args.setVertice2(vertice2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Aresta getResult() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readAresta();
      }
    }

    public void listVerticesFromAresta(int vertice1, int vertice2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listVerticesFromAresta_call method_call = new listVerticesFromAresta_call(vertice1, vertice2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listVerticesFromAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertice1;
      private int vertice2;
      public listVerticesFromAresta_call(int vertice1, int vertice2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertice1 = vertice1;
        this.vertice2 = vertice2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listVerticesFromAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listVerticesFromAresta_args args = new listVerticesFromAresta_args();
        args.setVertice1(vertice1);
        args.setVertice2(vertice2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertice> getResult() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listVerticesFromAresta();
      }
    }

    public void listArestasFromVertice(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listArestasFromVertice_call method_call = new listArestasFromVertice_call(nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listArestasFromVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nome;
      public listArestasFromVertice_call(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listArestasFromVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listArestasFromVertice_args args = new listArestasFromVertice_args();
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Aresta> getResult() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listArestasFromVertice();
      }
    }

    public void listNeighbors(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listNeighbors_call method_call = new listNeighbors_call(nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listNeighbors_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nome;
      public listNeighbors_call(int nome, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listNeighbors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listNeighbors_args args = new listNeighbors_args();
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertice> getResult() throws KeyNotFound, ResourceInUse, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listNeighbors();
      }
    }

    public void listVertices(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listVertices_call method_call = new listVertices_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listVertices_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listVertices_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listVertices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listVertices_args args = new listVertices_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertice> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listVertices();
      }
    }

    public void listArestas(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listArestas_call method_call = new listArestas_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listArestas_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listArestas_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listArestas", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listArestas_args args = new listArestas_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Aresta> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listArestas();
      }
    }

  }
*/
  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createVertice", new createVertice());
      processMap.put("deleteVertice", new deleteVertice());
      processMap.put("updateVertice", new updateVertice());
      processMap.put("readVertice", new readVertice());
      processMap.put("createAresta", new createAresta());
      processMap.put("deleteAresta", new deleteAresta());
      processMap.put("updateAresta", new updateAresta());
      processMap.put("readAresta", new readAresta());
      processMap.put("listVerticesFromAresta", new listVerticesFromAresta());
      processMap.put("listArestasFromVertice", new listArestasFromVertice());
      processMap.put("listNeighbors", new listNeighbors());
      processMap.put("listVertices", new listVertices());
      processMap.put("listArestas", new listArestas());
      return processMap;
    }

    public static class createVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createVertice_args> {
      public createVertice() {
        super("createVertice");
      }

      public createVertice_args getEmptyArgsInstance() {
        return new createVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createVertice_result getResult(I iface, createVertice_args args) throws org.apache.thrift.TException {
        createVertice_result result = new createVertice_result();
        try {
          result.success = iface.createVertice(args.nome, args.cor, args.peso, args.descricao);
          result.setSuccessIsSet(true);
        } catch (KeyAlreadyUsed kau) {
          result.kau = kau;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class deleteVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteVertice_args> {
      public deleteVertice() {
        super("deleteVertice");
      }

      public deleteVertice_args getEmptyArgsInstance() {
        return new deleteVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteVertice_result getResult(I iface, deleteVertice_args args) throws org.apache.thrift.TException {
        deleteVertice_result result = new deleteVertice_result();
        try {
          result.success = iface.deleteVertice(args.key);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class updateVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateVertice_args> {
      public updateVertice() {
        super("updateVertice");
      }

      public updateVertice_args getEmptyArgsInstance() {
        return new updateVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateVertice_result getResult(I iface, updateVertice_args args) throws org.apache.thrift.TException {
        updateVertice_result result = new updateVertice_result();
        try {
          result.success = iface.updateVertice(args.nome, args.cor, args.peso, args.descricao);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class readVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readVertice_args> {
      public readVertice() {
        super("readVertice");
      }

      public readVertice_args getEmptyArgsInstance() {
        return new readVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readVertice_result getResult(I iface, readVertice_args args) throws org.apache.thrift.TException {
        readVertice_result result = new readVertice_result();
        try {
          result.success = iface.readVertice(args.key);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class createAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAresta_args> {
      public createAresta() {
        super("createAresta");
      }

      public createAresta_args getEmptyArgsInstance() {
        return new createAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createAresta_result getResult(I iface, createAresta_args args) throws org.apache.thrift.TException {
        createAresta_result result = new createAresta_result();
        try {
          result.success = iface.createAresta(args.vertice1, args.vertice2, args.peso, args.direcionado, args.descricao);
          result.setSuccessIsSet(true);
        } catch (KeyAlreadyUsed kau) {
          result.kau = kau;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class deleteAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAresta_args> {
      public deleteAresta() {
        super("deleteAresta");
      }

      public deleteAresta_args getEmptyArgsInstance() {
        return new deleteAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteAresta_result getResult(I iface, deleteAresta_args args) throws org.apache.thrift.TException {
        deleteAresta_result result = new deleteAresta_result();
        try {
          result.success = iface.deleteAresta(args.vertice1, args.vertice2);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class updateAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAresta_args> {
      public updateAresta() {
        super("updateAresta");
      }

      public updateAresta_args getEmptyArgsInstance() {
        return new updateAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAresta_result getResult(I iface, updateAresta_args args) throws org.apache.thrift.TException {
        updateAresta_result result = new updateAresta_result();
        try {
          result.success = iface.updateAresta(args.vertice1, args.vertice2, args.peso, args.direcionado, args.descricao);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class readAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readAresta_args> {
      public readAresta() {
        super("readAresta");
      }

      public readAresta_args getEmptyArgsInstance() {
        return new readAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readAresta_result getResult(I iface, readAresta_args args) throws org.apache.thrift.TException {
        readAresta_result result = new readAresta_result();
        try {
          result.success = iface.readAresta(args.vertice1, args.vertice2);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class listVerticesFromAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listVerticesFromAresta_args> {
      public listVerticesFromAresta() {
        super("listVerticesFromAresta");
      }

      public listVerticesFromAresta_args getEmptyArgsInstance() {
        return new listVerticesFromAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listVerticesFromAresta_result getResult(I iface, listVerticesFromAresta_args args) throws org.apache.thrift.TException {
        listVerticesFromAresta_result result = new listVerticesFromAresta_result();
        try {
          result.success = iface.listVerticesFromAresta(args.vertice1, args.vertice2);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class listArestasFromVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listArestasFromVertice_args> {
      public listArestasFromVertice() {
        super("listArestasFromVertice");
      }

      public listArestasFromVertice_args getEmptyArgsInstance() {
        return new listArestasFromVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listArestasFromVertice_result getResult(I iface, listArestasFromVertice_args args) throws org.apache.thrift.TException {
        listArestasFromVertice_result result = new listArestasFromVertice_result();
        try {
          result.success = iface.listArestasFromVertice(args.nome);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class listNeighbors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listNeighbors_args> {
      public listNeighbors() {
        super("listNeighbors");
      }

      public listNeighbors_args getEmptyArgsInstance() {
        return new listNeighbors_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listNeighbors_result getResult(I iface, listNeighbors_args args) throws org.apache.thrift.TException {
        listNeighbors_result result = new listNeighbors_result();
        try {
          result.success = iface.listNeighbors(args.nome);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        } catch (ResourceInUse riu) {
          result.riu = riu;
        }
        return result;
      }
    }

    public static class listVertices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listVertices_args> {
      public listVertices() {
        super("listVertices");
      }

      public listVertices_args getEmptyArgsInstance() {
        return new listVertices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listVertices_result getResult(I iface, listVertices_args args) throws org.apache.thrift.TException {
        listVertices_result result = new listVertices_result();
        result.success = iface.listVertices();
        return result;
      }
    }

    public static class listArestas<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listArestas_args> {
      public listArestas() {
        super("listArestas");
      }

      public listArestas_args getEmptyArgsInstance() {
        return new listArestas_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listArestas_result getResult(I iface, listArestas_args args) throws org.apache.thrift.TException {
        listArestas_result result = new listArestas_result();
        result.success = iface.listArestas();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createVertice", new createVertice());
      processMap.put("deleteVertice", new deleteVertice());
      processMap.put("updateVertice", new updateVertice());
      processMap.put("readVertice", new readVertice());
      processMap.put("createAresta", new createAresta());
      processMap.put("deleteAresta", new deleteAresta());
      processMap.put("updateAresta", new updateAresta());
      processMap.put("readAresta", new readAresta());
      processMap.put("listVerticesFromAresta", new listVerticesFromAresta());
      processMap.put("listArestasFromVertice", new listArestasFromVertice());
      processMap.put("listNeighbors", new listNeighbors());
      processMap.put("listVertices", new listVertices());
      processMap.put("listArestas", new listArestas());
      return processMap;
    }

    public static class createVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createVertice_args, Boolean> {
      public createVertice() {
        super("createVertice");
      }

      public createVertice_args getEmptyArgsInstance() {
        return new createVertice_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createVertice_result result = new createVertice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createVertice_result result = new createVertice_result();
            if (e instanceof KeyAlreadyUsed) {
                        result.kau = (KeyAlreadyUsed) e;
                        result.setKauIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createVertice(args.nome, args.cor, args.peso, args.descricao,resultHandler);
      }
    }

    public static class deleteVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteVertice_args, Boolean> {
      public deleteVertice() {
        super("deleteVertice");
      }

      public deleteVertice_args getEmptyArgsInstance() {
        return new deleteVertice_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteVertice_result result = new deleteVertice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteVertice_result result = new deleteVertice_result();
            if (e instanceof KeyNotFound) {
                        result.knf = (KeyNotFound) e;
                        result.setKnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteVertice(args.key,resultHandler);
      }
    }

    public static class updateVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateVertice_args, Boolean> {
      public updateVertice() {
        super("updateVertice");
      }

      public updateVertice_args getEmptyArgsInstance() {
        return new updateVertice_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateVertice_result result = new updateVertice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateVertice_result result = new updateVertice_result();
            if (e instanceof KeyNotFound) {
                        result.knf = (KeyNotFound) e;
                        result.setKnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateVertice(args.nome, args.cor, args.peso, args.descricao,resultHandler);
      }
    }

    public static class readVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readVertice_args, Vertice> {
      public readVertice() {
        super("readVertice");
      }

      public readVertice_args getEmptyArgsInstance() {
        return new readVertice_args();
      }

      public AsyncMethodCallback<Vertice> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Vertice>() { 
          public void onComplete(Vertice o) {
            readVertice_result result = new readVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readVertice_result result = new readVertice_result();
            if (e instanceof KeyNotFound) {
                        result.knf = (KeyNotFound) e;
                        result.setKnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Vertice> resultHandler) throws TException {
        iface.readVertice(args.key,resultHandler);
      }
    }

    public static class createAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createAresta_args, Boolean> {
      public createAresta() {
        super("createAresta");
      }

      public createAresta_args getEmptyArgsInstance() {
        return new createAresta_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createAresta_result result = new createAresta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createAresta_result result = new createAresta_result();
            if (e instanceof KeyAlreadyUsed) {
                        result.kau = (KeyAlreadyUsed) e;
                        result.setKauIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createAresta(args.vertice1, args.vertice2, args.peso, args.direcionado, args.descricao,resultHandler);
      }
    }

    public static class deleteAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAresta_args, Boolean> {
      public deleteAresta() {
        super("deleteAresta");
      }

      public deleteAresta_args getEmptyArgsInstance() {
        return new deleteAresta_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteAresta_result result = new deleteAresta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteAresta_result result = new deleteAresta_result();
            if (e instanceof KeyNotFound) {
                        result.knf = (KeyNotFound) e;
                        result.setKnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteAresta(args.vertice1, args.vertice2,resultHandler);
      }
    }

    public static class updateAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAresta_args, Boolean> {
      public updateAresta() {
        super("updateAresta");
      }

      public updateAresta_args getEmptyArgsInstance() {
        return new updateAresta_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateAresta_result result = new updateAresta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateAresta_result result = new updateAresta_result();
            if (e instanceof KeyNotFound) {
                        result.knf = (KeyNotFound) e;
                        result.setKnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateAresta(args.vertice1, args.vertice2, args.peso, args.direcionado, args.descricao,resultHandler);
      }
    }

    public static class readAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readAresta_args, Aresta> {
      public readAresta() {
        super("readAresta");
      }

      public readAresta_args getEmptyArgsInstance() {
        return new readAresta_args();
      }

      public AsyncMethodCallback<Aresta> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Aresta>() { 
          public void onComplete(Aresta o) {
            readAresta_result result = new readAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readAresta_result result = new readAresta_result();
            if (e instanceof KeyNotFound) {
                        result.knf = (KeyNotFound) e;
                        result.setKnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Aresta> resultHandler) throws TException {
        iface.readAresta(args.vertice1, args.vertice2,resultHandler);
      }
    }

    public static class listVerticesFromAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listVerticesFromAresta_args, List<Vertice>> {
      public listVerticesFromAresta() {
        super("listVerticesFromAresta");
      }

      public listVerticesFromAresta_args getEmptyArgsInstance() {
        return new listVerticesFromAresta_args();
      }

      public AsyncMethodCallback<List<Vertice>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Vertice>>() { 
          public void onComplete(List<Vertice> o) {
            listVerticesFromAresta_result result = new listVerticesFromAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listVerticesFromAresta_result result = new listVerticesFromAresta_result();
            if (e instanceof KeyNotFound) {
                        result.knf = (KeyNotFound) e;
                        result.setKnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listVerticesFromAresta_args args, org.apache.thrift.async.AsyncMethodCallback<List<Vertice>> resultHandler) throws TException {
        iface.listVerticesFromAresta(args.vertice1, args.vertice2,resultHandler);
      }
    }

    public static class listArestasFromVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listArestasFromVertice_args, List<Aresta>> {
      public listArestasFromVertice() {
        super("listArestasFromVertice");
      }

      public listArestasFromVertice_args getEmptyArgsInstance() {
        return new listArestasFromVertice_args();
      }

      public AsyncMethodCallback<List<Aresta>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Aresta>>() { 
          public void onComplete(List<Aresta> o) {
            listArestasFromVertice_result result = new listArestasFromVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listArestasFromVertice_result result = new listArestasFromVertice_result();
            if (e instanceof KeyNotFound) {
                        result.knf = (KeyNotFound) e;
                        result.setKnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listArestasFromVertice_args args, org.apache.thrift.async.AsyncMethodCallback<List<Aresta>> resultHandler) throws TException {
        iface.listArestasFromVertice(args.nome,resultHandler);
      }
    }

    public static class listNeighbors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listNeighbors_args, List<Vertice>> {
      public listNeighbors() {
        super("listNeighbors");
      }

      public listNeighbors_args getEmptyArgsInstance() {
        return new listNeighbors_args();
      }

      public AsyncMethodCallback<List<Vertice>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Vertice>>() { 
          public void onComplete(List<Vertice> o) {
            listNeighbors_result result = new listNeighbors_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listNeighbors_result result = new listNeighbors_result();
            if (e instanceof KeyNotFound) {
                        result.knf = (KeyNotFound) e;
                        result.setKnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceInUse) {
                        result.riu = (ResourceInUse) e;
                        result.setRiuIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listNeighbors_args args, org.apache.thrift.async.AsyncMethodCallback<List<Vertice>> resultHandler) throws TException {
        iface.listNeighbors(args.nome,resultHandler);
      }
    }

    public static class listVertices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listVertices_args, List<Vertice>> {
      public listVertices() {
        super("listVertices");
      }

      public listVertices_args getEmptyArgsInstance() {
        return new listVertices_args();
      }

      public AsyncMethodCallback<List<Vertice>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Vertice>>() { 
          public void onComplete(List<Vertice> o) {
            listVertices_result result = new listVertices_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listVertices_result result = new listVertices_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listVertices_args args, org.apache.thrift.async.AsyncMethodCallback<List<Vertice>> resultHandler) throws TException {
        iface.listVertices(resultHandler);
      }
    }

    public static class listArestas<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listArestas_args, List<Aresta>> {
      public listArestas() {
        super("listArestas");
      }

      public listArestas_args getEmptyArgsInstance() {
        return new listArestas_args();
      }

      public AsyncMethodCallback<List<Aresta>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Aresta>>() { 
          public void onComplete(List<Aresta> o) {
            listArestas_result result = new listArestas_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listArestas_result result = new listArestas_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listArestas_args args, org.apache.thrift.async.AsyncMethodCallback<List<Aresta>> resultHandler) throws TException {
        iface.listArestas(resultHandler);
      }
    }

  }

  public static class createVertice_args implements org.apache.thrift.TBase<createVertice_args, createVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<createVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COR_FIELD_DESC = new org.apache.thrift.protocol.TField("cor", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVertice_argsTupleSchemeFactory());
    }

    public int nome; // required
    public int cor; // required
    public double peso; // required
    public String descricao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome"),
      COR((short)2, "cor"),
      PESO((short)3, "peso"),
      DESCRICAO((short)4, "descricao");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          case 2: // COR
            return COR;
          case 3: // PESO
            return PESO;
          case 4: // DESCRICAO
            return DESCRICAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private static final int __COR_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COR, new org.apache.thrift.meta_data.FieldMetaData("cor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVertice_args.class, metaDataMap);
    }

    public createVertice_args() {
    }

    public createVertice_args(
      int nome,
      int cor,
      double peso,
      String descricao)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
      this.cor = cor;
      setCorIsSet(true);
      this.peso = peso;
      setPesoIsSet(true);
      this.descricao = descricao;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVertice_args(createVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
      this.cor = other.cor;
      this.peso = other.peso;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
    }

    public createVertice_args deepCopy() {
      return new createVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
      setCorIsSet(false);
      this.cor = 0;
      setPesoIsSet(false);
      this.peso = 0.0;
      this.descricao = null;
    }

    public int getNome() {
      return this.nome;
    }

    public createVertice_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public int getCor() {
      return this.cor;
    }

    public createVertice_args setCor(int cor) {
      this.cor = cor;
      setCorIsSet(true);
      return this;
    }

    public void unsetCor() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COR_ISSET_ID);
    }

    /** Returns true if field cor is set (has been assigned a value) and false otherwise */
    public boolean isSetCor() {
      return EncodingUtils.testBit(__isset_bitfield, __COR_ISSET_ID);
    }

    public void setCorIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COR_ISSET_ID, value);
    }

    public double getPeso() {
      return this.peso;
    }

    public createVertice_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public createVertice_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Integer)value);
        }
        break;

      case COR:
        if (value == null) {
          unsetCor();
        } else {
          setCor((Integer)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Integer.valueOf(getNome());

      case COR:
        return Integer.valueOf(getCor());

      case PESO:
        return Double.valueOf(getPeso());

      case DESCRICAO:
        return getDescricao();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      case COR:
        return isSetCor();
      case PESO:
        return isSetPeso();
      case DESCRICAO:
        return isSetDescricao();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVertice_args)
        return this.equals((createVertice_args)that);
      return false;
    }

    public boolean equals(createVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      boolean this_present_cor = true;
      boolean that_present_cor = true;
      if (this_present_cor || that_present_cor) {
        if (!(this_present_cor && that_present_cor))
          return false;
        if (this.cor != that.cor)
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCor()).compareTo(other.isSetCor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cor, other.cor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cor:");
      sb.append(this.cor);
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVertice_argsStandardSchemeFactory implements SchemeFactory {
      public createVertice_argsStandardScheme getScheme() {
        return new createVertice_argsStandardScheme();
      }
    }

    private static class createVertice_argsStandardScheme extends StandardScheme<createVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cor = iprot.readI32();
                struct.setCorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COR_FIELD_DESC);
        oprot.writeI32(struct.cor);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVertice_argsTupleSchemeFactory implements SchemeFactory {
      public createVertice_argsTupleScheme getScheme() {
        return new createVertice_argsTupleScheme();
      }
    }

    private static class createVertice_argsTupleScheme extends TupleScheme<createVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        if (struct.isSetCor()) {
          optionals.set(1);
        }
        if (struct.isSetPeso()) {
          optionals.set(2);
        }
        if (struct.isSetDescricao()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
        if (struct.isSetCor()) {
          oprot.writeI32(struct.cor);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cor = iprot.readI32();
          struct.setCorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
      }
    }

  }

  public static class createVertice_result implements org.apache.thrift.TBase<createVertice_result, createVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<createVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KAU_FIELD_DESC = new org.apache.thrift.protocol.TField("kau", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVertice_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public KeyAlreadyUsed kau; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KAU((short)1, "kau"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KAU
            return KAU;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KAU, new org.apache.thrift.meta_data.FieldMetaData("kau", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVertice_result.class, metaDataMap);
    }

    public createVertice_result() {
    }

    public createVertice_result(
      boolean success,
      KeyAlreadyUsed kau,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.kau = kau;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVertice_result(createVertice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKau()) {
        this.kau = new KeyAlreadyUsed(other.kau);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public createVertice_result deepCopy() {
      return new createVertice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.kau = null;
      this.riu = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createVertice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyAlreadyUsed getKau() {
      return this.kau;
    }

    public createVertice_result setKau(KeyAlreadyUsed kau) {
      this.kau = kau;
      return this;
    }

    public void unsetKau() {
      this.kau = null;
    }

    /** Returns true if field kau is set (has been assigned a value) and false otherwise */
    public boolean isSetKau() {
      return this.kau != null;
    }

    public void setKauIsSet(boolean value) {
      if (!value) {
        this.kau = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public createVertice_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case KAU:
        if (value == null) {
          unsetKau();
        } else {
          setKau((KeyAlreadyUsed)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case KAU:
        return getKau();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KAU:
        return isSetKau();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVertice_result)
        return this.equals((createVertice_result)that);
      return false;
    }

    public boolean equals(createVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_kau = true && this.isSetKau();
      boolean that_present_kau = true && that.isSetKau();
      if (this_present_kau || that_present_kau) {
        if (!(this_present_kau && that_present_kau))
          return false;
        if (!this.kau.equals(that.kau))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKau()).compareTo(other.isSetKau());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKau()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kau, other.kau);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVertice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("kau:");
      if (this.kau == null) {
        sb.append("null");
      } else {
        sb.append(this.kau);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVertice_resultStandardSchemeFactory implements SchemeFactory {
      public createVertice_resultStandardScheme getScheme() {
        return new createVertice_resultStandardScheme();
      }
    }

    private static class createVertice_resultStandardScheme extends StandardScheme<createVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KAU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kau = new KeyAlreadyUsed();
                struct.kau.read(iprot);
                struct.setKauIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.kau != null) {
          oprot.writeFieldBegin(KAU_FIELD_DESC);
          struct.kau.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVertice_resultTupleSchemeFactory implements SchemeFactory {
      public createVertice_resultTupleScheme getScheme() {
        return new createVertice_resultTupleScheme();
      }
    }

    private static class createVertice_resultTupleScheme extends TupleScheme<createVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKau()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKau()) {
          struct.kau.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kau = new KeyAlreadyUsed();
          struct.kau.read(iprot);
          struct.setKauIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class deleteVertice_args implements org.apache.thrift.TBase<deleteVertice_args, deleteVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVertice_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVertice_argsTupleSchemeFactory());
    }

    public int key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVertice_args.class, metaDataMap);
    }

    public deleteVertice_args() {
    }

    public deleteVertice_args(
      int key)
    {
      this();
      this.key = key;
      setKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVertice_args(deleteVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.key = other.key;
    }

    public deleteVertice_args deepCopy() {
      return new deleteVertice_args(this);
    }

    @Override
    public void clear() {
      setKeyIsSet(false);
      this.key = 0;
    }

    public int getKey() {
      return this.key;
    }

    public deleteVertice_args setKey(int key) {
      this.key = key;
      setKeyIsSet(true);
      return this;
    }

    public void unsetKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    public void setKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return Integer.valueOf(getKey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVertice_args)
        return this.equals((deleteVertice_args)that);
      return false;
    }

    public boolean equals(deleteVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVertice_args(");
      boolean first = true;

      sb.append("key:");
      sb.append(this.key);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVertice_argsStandardSchemeFactory implements SchemeFactory {
      public deleteVertice_argsStandardScheme getScheme() {
        return new deleteVertice_argsStandardScheme();
      }
    }

    private static class deleteVertice_argsStandardScheme extends StandardScheme<deleteVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.key = iprot.readI32();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeI32(struct.key);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVertice_argsTupleSchemeFactory implements SchemeFactory {
      public deleteVertice_argsTupleScheme getScheme() {
        return new deleteVertice_argsTupleScheme();
      }
    }

    private static class deleteVertice_argsTupleScheme extends TupleScheme<deleteVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeI32(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readI32();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class deleteVertice_result implements org.apache.thrift.TBase<deleteVertice_result, deleteVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVertice_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public KeyNotFound knf; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVertice_result.class, metaDataMap);
    }

    public deleteVertice_result() {
    }

    public deleteVertice_result(
      boolean success,
      KeyNotFound knf,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVertice_result(deleteVertice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public deleteVertice_result deepCopy() {
      return new deleteVertice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
      this.riu = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteVertice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public deleteVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public deleteVertice_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case KNF:
        return getKnf();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVertice_result)
        return this.equals((deleteVertice_result)that);
      return false;
    }

    public boolean equals(deleteVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVertice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVertice_resultStandardSchemeFactory implements SchemeFactory {
      public deleteVertice_resultStandardScheme getScheme() {
        return new deleteVertice_resultStandardScheme();
      }
    }

    private static class deleteVertice_resultStandardScheme extends StandardScheme<deleteVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVertice_resultTupleSchemeFactory implements SchemeFactory {
      public deleteVertice_resultTupleScheme getScheme() {
        return new deleteVertice_resultTupleScheme();
      }
    }

    private static class deleteVertice_resultTupleScheme extends TupleScheme<deleteVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class updateVertice_args implements org.apache.thrift.TBase<updateVertice_args, updateVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COR_FIELD_DESC = new org.apache.thrift.protocol.TField("cor", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVertice_argsTupleSchemeFactory());
    }

    public int nome; // required
    public int cor; // required
    public double peso; // required
    public String descricao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome"),
      COR((short)2, "cor"),
      PESO((short)3, "peso"),
      DESCRICAO((short)4, "descricao");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          case 2: // COR
            return COR;
          case 3: // PESO
            return PESO;
          case 4: // DESCRICAO
            return DESCRICAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private static final int __COR_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COR, new org.apache.thrift.meta_data.FieldMetaData("cor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVertice_args.class, metaDataMap);
    }

    public updateVertice_args() {
    }

    public updateVertice_args(
      int nome,
      int cor,
      double peso,
      String descricao)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
      this.cor = cor;
      setCorIsSet(true);
      this.peso = peso;
      setPesoIsSet(true);
      this.descricao = descricao;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVertice_args(updateVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
      this.cor = other.cor;
      this.peso = other.peso;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
    }

    public updateVertice_args deepCopy() {
      return new updateVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
      setCorIsSet(false);
      this.cor = 0;
      setPesoIsSet(false);
      this.peso = 0.0;
      this.descricao = null;
    }

    public int getNome() {
      return this.nome;
    }

    public updateVertice_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public int getCor() {
      return this.cor;
    }

    public updateVertice_args setCor(int cor) {
      this.cor = cor;
      setCorIsSet(true);
      return this;
    }

    public void unsetCor() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COR_ISSET_ID);
    }

    /** Returns true if field cor is set (has been assigned a value) and false otherwise */
    public boolean isSetCor() {
      return EncodingUtils.testBit(__isset_bitfield, __COR_ISSET_ID);
    }

    public void setCorIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COR_ISSET_ID, value);
    }

    public double getPeso() {
      return this.peso;
    }

    public updateVertice_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public updateVertice_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Integer)value);
        }
        break;

      case COR:
        if (value == null) {
          unsetCor();
        } else {
          setCor((Integer)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Integer.valueOf(getNome());

      case COR:
        return Integer.valueOf(getCor());

      case PESO:
        return Double.valueOf(getPeso());

      case DESCRICAO:
        return getDescricao();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      case COR:
        return isSetCor();
      case PESO:
        return isSetPeso();
      case DESCRICAO:
        return isSetDescricao();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVertice_args)
        return this.equals((updateVertice_args)that);
      return false;
    }

    public boolean equals(updateVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      boolean this_present_cor = true;
      boolean that_present_cor = true;
      if (this_present_cor || that_present_cor) {
        if (!(this_present_cor && that_present_cor))
          return false;
        if (this.cor != that.cor)
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCor()).compareTo(other.isSetCor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cor, other.cor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cor:");
      sb.append(this.cor);
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVertice_argsStandardSchemeFactory implements SchemeFactory {
      public updateVertice_argsStandardScheme getScheme() {
        return new updateVertice_argsStandardScheme();
      }
    }

    private static class updateVertice_argsStandardScheme extends StandardScheme<updateVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cor = iprot.readI32();
                struct.setCorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COR_FIELD_DESC);
        oprot.writeI32(struct.cor);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVertice_argsTupleSchemeFactory implements SchemeFactory {
      public updateVertice_argsTupleScheme getScheme() {
        return new updateVertice_argsTupleScheme();
      }
    }

    private static class updateVertice_argsTupleScheme extends TupleScheme<updateVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        if (struct.isSetCor()) {
          optionals.set(1);
        }
        if (struct.isSetPeso()) {
          optionals.set(2);
        }
        if (struct.isSetDescricao()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
        if (struct.isSetCor()) {
          oprot.writeI32(struct.cor);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cor = iprot.readI32();
          struct.setCorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
      }
    }

  }

  public static class updateVertice_result implements org.apache.thrift.TBase<updateVertice_result, updateVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVertice_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public KeyNotFound knf; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVertice_result.class, metaDataMap);
    }

    public updateVertice_result() {
    }

    public updateVertice_result(
      boolean success,
      KeyNotFound knf,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVertice_result(updateVertice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public updateVertice_result deepCopy() {
      return new updateVertice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
      this.riu = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateVertice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public updateVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public updateVertice_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case KNF:
        return getKnf();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVertice_result)
        return this.equals((updateVertice_result)that);
      return false;
    }

    public boolean equals(updateVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVertice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVertice_resultStandardSchemeFactory implements SchemeFactory {
      public updateVertice_resultStandardScheme getScheme() {
        return new updateVertice_resultStandardScheme();
      }
    }

    private static class updateVertice_resultStandardScheme extends StandardScheme<updateVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVertice_resultTupleSchemeFactory implements SchemeFactory {
      public updateVertice_resultTupleScheme getScheme() {
        return new updateVertice_resultTupleScheme();
      }
    }

    private static class updateVertice_resultTupleScheme extends TupleScheme<updateVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class readVertice_args implements org.apache.thrift.TBase<readVertice_args, readVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<readVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVertice_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readVertice_argsTupleSchemeFactory());
    }

    public int key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVertice_args.class, metaDataMap);
    }

    public readVertice_args() {
    }

    public readVertice_args(
      int key)
    {
      this();
      this.key = key;
      setKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVertice_args(readVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.key = other.key;
    }

    public readVertice_args deepCopy() {
      return new readVertice_args(this);
    }

    @Override
    public void clear() {
      setKeyIsSet(false);
      this.key = 0;
    }

    public int getKey() {
      return this.key;
    }

    public readVertice_args setKey(int key) {
      this.key = key;
      setKeyIsSet(true);
      return this;
    }

    public void unsetKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    public void setKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return Integer.valueOf(getKey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readVertice_args)
        return this.equals((readVertice_args)that);
      return false;
    }

    public boolean equals(readVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readVertice_args(");
      boolean first = true;

      sb.append("key:");
      sb.append(this.key);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVertice_argsStandardSchemeFactory implements SchemeFactory {
      public readVertice_argsStandardScheme getScheme() {
        return new readVertice_argsStandardScheme();
      }
    }

    private static class readVertice_argsStandardScheme extends StandardScheme<readVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.key = iprot.readI32();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeI32(struct.key);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVertice_argsTupleSchemeFactory implements SchemeFactory {
      public readVertice_argsTupleScheme getScheme() {
        return new readVertice_argsTupleScheme();
      }
    }

    private static class readVertice_argsTupleScheme extends TupleScheme<readVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeI32(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readI32();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class readVertice_result implements org.apache.thrift.TBase<readVertice_result, readVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<readVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readVertice_resultTupleSchemeFactory());
    }

    public Vertice success; // required
    public KeyNotFound knf; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVertice_result.class, metaDataMap);
    }

    public readVertice_result() {
    }

    public readVertice_result(
      Vertice success,
      KeyNotFound knf,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      this.knf = knf;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVertice_result(readVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = new Vertice(other.success);
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public readVertice_result deepCopy() {
      return new readVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
      this.riu = null;
    }

    public Vertice getSuccess() {
      return this.success;
    }

    public readVertice_result setSuccess(Vertice success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public readVertice_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Vertice)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readVertice_result)
        return this.equals((readVertice_result)that);
      return false;
    }

    public boolean equals(readVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVertice_resultStandardSchemeFactory implements SchemeFactory {
      public readVertice_resultStandardScheme getScheme() {
        return new readVertice_resultStandardScheme();
      }
    }

    private static class readVertice_resultStandardScheme extends StandardScheme<readVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Vertice();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVertice_resultTupleSchemeFactory implements SchemeFactory {
      public readVertice_resultTupleScheme getScheme() {
        return new readVertice_resultTupleScheme();
      }
    }

    private static class readVertice_resultTupleScheme extends TupleScheme<readVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Vertice();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class createAresta_args implements org.apache.thrift.TBase<createAresta_args, createAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<createAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAresta_args");

    private static final org.apache.thrift.protocol.TField VERTICE1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTICE2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField DIRECIONADO_FIELD_DESC = new org.apache.thrift.protocol.TField("direcionado", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createAresta_argsTupleSchemeFactory());
    }

    public int vertice1; // required
    public int vertice2; // required
    public double peso; // required
    public boolean direcionado; // required
    public String descricao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTICE1((short)1, "vertice1"),
      VERTICE2((short)2, "vertice2"),
      PESO((short)3, "peso"),
      DIRECIONADO((short)4, "direcionado"),
      DESCRICAO((short)5, "descricao");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTICE1
            return VERTICE1;
          case 2: // VERTICE2
            return VERTICE2;
          case 3: // PESO
            return PESO;
          case 4: // DIRECIONADO
            return DIRECIONADO;
          case 5: // DESCRICAO
            return DESCRICAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTICE1_ISSET_ID = 0;
    private static final int __VERTICE2_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private static final int __DIRECIONADO_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTICE1, new org.apache.thrift.meta_data.FieldMetaData("vertice1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTICE2, new org.apache.thrift.meta_data.FieldMetaData("vertice2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DIRECIONADO, new org.apache.thrift.meta_data.FieldMetaData("direcionado", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAresta_args.class, metaDataMap);
    }

    public createAresta_args() {
    }

    public createAresta_args(
      int vertice1,
      int vertice2,
      double peso,
      boolean direcionado,
      String descricao)
    {
      this();
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
      this.peso = peso;
      setPesoIsSet(true);
      this.direcionado = direcionado;
      setDirecionadoIsSet(true);
      this.descricao = descricao;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAresta_args(createAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertice1 = other.vertice1;
      this.vertice2 = other.vertice2;
      this.peso = other.peso;
      this.direcionado = other.direcionado;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
    }

    public createAresta_args deepCopy() {
      return new createAresta_args(this);
    }

    @Override
    public void clear() {
      setVertice1IsSet(false);
      this.vertice1 = 0;
      setVertice2IsSet(false);
      this.vertice2 = 0;
      setPesoIsSet(false);
      this.peso = 0.0;
      setDirecionadoIsSet(false);
      this.direcionado = false;
      this.descricao = null;
    }

    public int getVertice1() {
      return this.vertice1;
    }

    public createAresta_args setVertice1(int vertice1) {
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      return this;
    }

    public void unsetVertice1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    /** Returns true if field vertice1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    public void setVertice1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE1_ISSET_ID, value);
    }

    public int getVertice2() {
      return this.vertice2;
    }

    public createAresta_args setVertice2(int vertice2) {
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
      return this;
    }

    public void unsetVertice2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    /** Returns true if field vertice2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    public void setVertice2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE2_ISSET_ID, value);
    }

    public double getPeso() {
      return this.peso;
    }

    public createAresta_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public boolean isDirecionado() {
      return this.direcionado;
    }

    public createAresta_args setDirecionado(boolean direcionado) {
      this.direcionado = direcionado;
      setDirecionadoIsSet(true);
      return this;
    }

    public void unsetDirecionado() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
    }

    /** Returns true if field direcionado is set (has been assigned a value) and false otherwise */
    public boolean isSetDirecionado() {
      return EncodingUtils.testBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
    }

    public void setDirecionadoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECIONADO_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public createAresta_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTICE1:
        if (value == null) {
          unsetVertice1();
        } else {
          setVertice1((Integer)value);
        }
        break;

      case VERTICE2:
        if (value == null) {
          unsetVertice2();
        } else {
          setVertice2((Integer)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      case DIRECIONADO:
        if (value == null) {
          unsetDirecionado();
        } else {
          setDirecionado((Boolean)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTICE1:
        return Integer.valueOf(getVertice1());

      case VERTICE2:
        return Integer.valueOf(getVertice2());

      case PESO:
        return Double.valueOf(getPeso());

      case DIRECIONADO:
        return Boolean.valueOf(isDirecionado());

      case DESCRICAO:
        return getDescricao();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTICE1:
        return isSetVertice1();
      case VERTICE2:
        return isSetVertice2();
      case PESO:
        return isSetPeso();
      case DIRECIONADO:
        return isSetDirecionado();
      case DESCRICAO:
        return isSetDescricao();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAresta_args)
        return this.equals((createAresta_args)that);
      return false;
    }

    public boolean equals(createAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_vertice1 = true;
      boolean that_present_vertice1 = true;
      if (this_present_vertice1 || that_present_vertice1) {
        if (!(this_present_vertice1 && that_present_vertice1))
          return false;
        if (this.vertice1 != that.vertice1)
          return false;
      }

      boolean this_present_vertice2 = true;
      boolean that_present_vertice2 = true;
      if (this_present_vertice2 || that_present_vertice2) {
        if (!(this_present_vertice2 && that_present_vertice2))
          return false;
        if (this.vertice2 != that.vertice2)
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      boolean this_present_direcionado = true;
      boolean that_present_direcionado = true;
      if (this_present_direcionado || that_present_direcionado) {
        if (!(this_present_direcionado && that_present_direcionado))
          return false;
        if (this.direcionado != that.direcionado)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertice1()).compareTo(other.isSetVertice1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice1, other.vertice1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertice2()).compareTo(other.isSetVertice2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice2, other.vertice2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirecionado()).compareTo(other.isSetDirecionado());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirecionado()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direcionado, other.direcionado);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAresta_args(");
      boolean first = true;

      sb.append("vertice1:");
      sb.append(this.vertice1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertice2:");
      sb.append(this.vertice2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      if (!first) sb.append(", ");
      sb.append("direcionado:");
      sb.append(this.direcionado);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAresta_argsStandardSchemeFactory implements SchemeFactory {
      public createAresta_argsStandardScheme getScheme() {
        return new createAresta_argsStandardScheme();
      }
    }

    private static class createAresta_argsStandardScheme extends StandardScheme<createAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTICE1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice1 = iprot.readI32();
                struct.setVertice1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTICE2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice2 = iprot.readI32();
                struct.setVertice2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DIRECIONADO
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.direcionado = iprot.readBool();
                struct.setDirecionadoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTICE1_FIELD_DESC);
        oprot.writeI32(struct.vertice1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTICE2_FIELD_DESC);
        oprot.writeI32(struct.vertice2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DIRECIONADO_FIELD_DESC);
        oprot.writeBool(struct.direcionado);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAresta_argsTupleSchemeFactory implements SchemeFactory {
      public createAresta_argsTupleScheme getScheme() {
        return new createAresta_argsTupleScheme();
      }
    }

    private static class createAresta_argsTupleScheme extends TupleScheme<createAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertice1()) {
          optionals.set(0);
        }
        if (struct.isSetVertice2()) {
          optionals.set(1);
        }
        if (struct.isSetPeso()) {
          optionals.set(2);
        }
        if (struct.isSetDirecionado()) {
          optionals.set(3);
        }
        if (struct.isSetDescricao()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetVertice1()) {
          oprot.writeI32(struct.vertice1);
        }
        if (struct.isSetVertice2()) {
          oprot.writeI32(struct.vertice2);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
        if (struct.isSetDirecionado()) {
          oprot.writeBool(struct.direcionado);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.vertice1 = iprot.readI32();
          struct.setVertice1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertice2 = iprot.readI32();
          struct.setVertice2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.direcionado = iprot.readBool();
          struct.setDirecionadoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
      }
    }

  }

  public static class createAresta_result implements org.apache.thrift.TBase<createAresta_result, createAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<createAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KAU_FIELD_DESC = new org.apache.thrift.protocol.TField("kau", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createAresta_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public KeyAlreadyUsed kau; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KAU((short)1, "kau"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KAU
            return KAU;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KAU, new org.apache.thrift.meta_data.FieldMetaData("kau", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAresta_result.class, metaDataMap);
    }

    public createAresta_result() {
    }

    public createAresta_result(
      boolean success,
      KeyAlreadyUsed kau,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.kau = kau;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAresta_result(createAresta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKau()) {
        this.kau = new KeyAlreadyUsed(other.kau);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public createAresta_result deepCopy() {
      return new createAresta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.kau = null;
      this.riu = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createAresta_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyAlreadyUsed getKau() {
      return this.kau;
    }

    public createAresta_result setKau(KeyAlreadyUsed kau) {
      this.kau = kau;
      return this;
    }

    public void unsetKau() {
      this.kau = null;
    }

    /** Returns true if field kau is set (has been assigned a value) and false otherwise */
    public boolean isSetKau() {
      return this.kau != null;
    }

    public void setKauIsSet(boolean value) {
      if (!value) {
        this.kau = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public createAresta_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case KAU:
        if (value == null) {
          unsetKau();
        } else {
          setKau((KeyAlreadyUsed)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case KAU:
        return getKau();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KAU:
        return isSetKau();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAresta_result)
        return this.equals((createAresta_result)that);
      return false;
    }

    public boolean equals(createAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_kau = true && this.isSetKau();
      boolean that_present_kau = true && that.isSetKau();
      if (this_present_kau || that_present_kau) {
        if (!(this_present_kau && that_present_kau))
          return false;
        if (!this.kau.equals(that.kau))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKau()).compareTo(other.isSetKau());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKau()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kau, other.kau);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAresta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("kau:");
      if (this.kau == null) {
        sb.append("null");
      } else {
        sb.append(this.kau);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAresta_resultStandardSchemeFactory implements SchemeFactory {
      public createAresta_resultStandardScheme getScheme() {
        return new createAresta_resultStandardScheme();
      }
    }

    private static class createAresta_resultStandardScheme extends StandardScheme<createAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KAU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kau = new KeyAlreadyUsed();
                struct.kau.read(iprot);
                struct.setKauIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.kau != null) {
          oprot.writeFieldBegin(KAU_FIELD_DESC);
          struct.kau.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAresta_resultTupleSchemeFactory implements SchemeFactory {
      public createAresta_resultTupleScheme getScheme() {
        return new createAresta_resultTupleScheme();
      }
    }

    private static class createAresta_resultTupleScheme extends TupleScheme<createAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKau()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKau()) {
          struct.kau.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kau = new KeyAlreadyUsed();
          struct.kau.read(iprot);
          struct.setKauIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class deleteAresta_args implements org.apache.thrift.TBase<deleteAresta_args, deleteAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAresta_args");

    private static final org.apache.thrift.protocol.TField VERTICE1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTICE2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAresta_argsTupleSchemeFactory());
    }

    public int vertice1; // required
    public int vertice2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTICE1((short)1, "vertice1"),
      VERTICE2((short)2, "vertice2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTICE1
            return VERTICE1;
          case 2: // VERTICE2
            return VERTICE2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTICE1_ISSET_ID = 0;
    private static final int __VERTICE2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTICE1, new org.apache.thrift.meta_data.FieldMetaData("vertice1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTICE2, new org.apache.thrift.meta_data.FieldMetaData("vertice2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAresta_args.class, metaDataMap);
    }

    public deleteAresta_args() {
    }

    public deleteAresta_args(
      int vertice1,
      int vertice2)
    {
      this();
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAresta_args(deleteAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertice1 = other.vertice1;
      this.vertice2 = other.vertice2;
    }

    public deleteAresta_args deepCopy() {
      return new deleteAresta_args(this);
    }

    @Override
    public void clear() {
      setVertice1IsSet(false);
      this.vertice1 = 0;
      setVertice2IsSet(false);
      this.vertice2 = 0;
    }

    public int getVertice1() {
      return this.vertice1;
    }

    public deleteAresta_args setVertice1(int vertice1) {
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      return this;
    }

    public void unsetVertice1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    /** Returns true if field vertice1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    public void setVertice1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE1_ISSET_ID, value);
    }

    public int getVertice2() {
      return this.vertice2;
    }

    public deleteAresta_args setVertice2(int vertice2) {
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
      return this;
    }

    public void unsetVertice2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    /** Returns true if field vertice2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    public void setVertice2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTICE1:
        if (value == null) {
          unsetVertice1();
        } else {
          setVertice1((Integer)value);
        }
        break;

      case VERTICE2:
        if (value == null) {
          unsetVertice2();
        } else {
          setVertice2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTICE1:
        return Integer.valueOf(getVertice1());

      case VERTICE2:
        return Integer.valueOf(getVertice2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTICE1:
        return isSetVertice1();
      case VERTICE2:
        return isSetVertice2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAresta_args)
        return this.equals((deleteAresta_args)that);
      return false;
    }

    public boolean equals(deleteAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_vertice1 = true;
      boolean that_present_vertice1 = true;
      if (this_present_vertice1 || that_present_vertice1) {
        if (!(this_present_vertice1 && that_present_vertice1))
          return false;
        if (this.vertice1 != that.vertice1)
          return false;
      }

      boolean this_present_vertice2 = true;
      boolean that_present_vertice2 = true;
      if (this_present_vertice2 || that_present_vertice2) {
        if (!(this_present_vertice2 && that_present_vertice2))
          return false;
        if (this.vertice2 != that.vertice2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertice1()).compareTo(other.isSetVertice1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice1, other.vertice1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertice2()).compareTo(other.isSetVertice2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice2, other.vertice2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAresta_args(");
      boolean first = true;

      sb.append("vertice1:");
      sb.append(this.vertice1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertice2:");
      sb.append(this.vertice2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAresta_argsStandardSchemeFactory implements SchemeFactory {
      public deleteAresta_argsStandardScheme getScheme() {
        return new deleteAresta_argsStandardScheme();
      }
    }

    private static class deleteAresta_argsStandardScheme extends StandardScheme<deleteAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTICE1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice1 = iprot.readI32();
                struct.setVertice1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTICE2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice2 = iprot.readI32();
                struct.setVertice2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTICE1_FIELD_DESC);
        oprot.writeI32(struct.vertice1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTICE2_FIELD_DESC);
        oprot.writeI32(struct.vertice2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAresta_argsTupleSchemeFactory implements SchemeFactory {
      public deleteAresta_argsTupleScheme getScheme() {
        return new deleteAresta_argsTupleScheme();
      }
    }

    private static class deleteAresta_argsTupleScheme extends TupleScheme<deleteAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertice1()) {
          optionals.set(0);
        }
        if (struct.isSetVertice2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVertice1()) {
          oprot.writeI32(struct.vertice1);
        }
        if (struct.isSetVertice2()) {
          oprot.writeI32(struct.vertice2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vertice1 = iprot.readI32();
          struct.setVertice1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertice2 = iprot.readI32();
          struct.setVertice2IsSet(true);
        }
      }
    }

  }

  public static class deleteAresta_result implements org.apache.thrift.TBase<deleteAresta_result, deleteAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAresta_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public KeyNotFound knf; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAresta_result.class, metaDataMap);
    }

    public deleteAresta_result() {
    }

    public deleteAresta_result(
      boolean success,
      KeyNotFound knf,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAresta_result(deleteAresta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public deleteAresta_result deepCopy() {
      return new deleteAresta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
      this.riu = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteAresta_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public deleteAresta_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public deleteAresta_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case KNF:
        return getKnf();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAresta_result)
        return this.equals((deleteAresta_result)that);
      return false;
    }

    public boolean equals(deleteAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAresta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAresta_resultStandardSchemeFactory implements SchemeFactory {
      public deleteAresta_resultStandardScheme getScheme() {
        return new deleteAresta_resultStandardScheme();
      }
    }

    private static class deleteAresta_resultStandardScheme extends StandardScheme<deleteAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAresta_resultTupleSchemeFactory implements SchemeFactory {
      public deleteAresta_resultTupleScheme getScheme() {
        return new deleteAresta_resultTupleScheme();
      }
    }

    private static class deleteAresta_resultTupleScheme extends TupleScheme<deleteAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class updateAresta_args implements org.apache.thrift.TBase<updateAresta_args, updateAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAresta_args");

    private static final org.apache.thrift.protocol.TField VERTICE1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTICE2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField DIRECIONADO_FIELD_DESC = new org.apache.thrift.protocol.TField("direcionado", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAresta_argsTupleSchemeFactory());
    }

    public int vertice1; // required
    public int vertice2; // required
    public double peso; // required
    public boolean direcionado; // required
    public String descricao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTICE1((short)1, "vertice1"),
      VERTICE2((short)2, "vertice2"),
      PESO((short)3, "peso"),
      DIRECIONADO((short)4, "direcionado"),
      DESCRICAO((short)5, "descricao");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTICE1
            return VERTICE1;
          case 2: // VERTICE2
            return VERTICE2;
          case 3: // PESO
            return PESO;
          case 4: // DIRECIONADO
            return DIRECIONADO;
          case 5: // DESCRICAO
            return DESCRICAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTICE1_ISSET_ID = 0;
    private static final int __VERTICE2_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private static final int __DIRECIONADO_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTICE1, new org.apache.thrift.meta_data.FieldMetaData("vertice1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTICE2, new org.apache.thrift.meta_data.FieldMetaData("vertice2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DIRECIONADO, new org.apache.thrift.meta_data.FieldMetaData("direcionado", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAresta_args.class, metaDataMap);
    }

    public updateAresta_args() {
    }

    public updateAresta_args(
      int vertice1,
      int vertice2,
      double peso,
      boolean direcionado,
      String descricao)
    {
      this();
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
      this.peso = peso;
      setPesoIsSet(true);
      this.direcionado = direcionado;
      setDirecionadoIsSet(true);
      this.descricao = descricao;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAresta_args(updateAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertice1 = other.vertice1;
      this.vertice2 = other.vertice2;
      this.peso = other.peso;
      this.direcionado = other.direcionado;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
    }

    public updateAresta_args deepCopy() {
      return new updateAresta_args(this);
    }

    @Override
    public void clear() {
      setVertice1IsSet(false);
      this.vertice1 = 0;
      setVertice2IsSet(false);
      this.vertice2 = 0;
      setPesoIsSet(false);
      this.peso = 0.0;
      setDirecionadoIsSet(false);
      this.direcionado = false;
      this.descricao = null;
    }

    public int getVertice1() {
      return this.vertice1;
    }

    public updateAresta_args setVertice1(int vertice1) {
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      return this;
    }

    public void unsetVertice1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    /** Returns true if field vertice1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    public void setVertice1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE1_ISSET_ID, value);
    }

    public int getVertice2() {
      return this.vertice2;
    }

    public updateAresta_args setVertice2(int vertice2) {
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
      return this;
    }

    public void unsetVertice2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    /** Returns true if field vertice2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    public void setVertice2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE2_ISSET_ID, value);
    }

    public double getPeso() {
      return this.peso;
    }

    public updateAresta_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public boolean isDirecionado() {
      return this.direcionado;
    }

    public updateAresta_args setDirecionado(boolean direcionado) {
      this.direcionado = direcionado;
      setDirecionadoIsSet(true);
      return this;
    }

    public void unsetDirecionado() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
    }

    /** Returns true if field direcionado is set (has been assigned a value) and false otherwise */
    public boolean isSetDirecionado() {
      return EncodingUtils.testBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
    }

    public void setDirecionadoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECIONADO_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public updateAresta_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTICE1:
        if (value == null) {
          unsetVertice1();
        } else {
          setVertice1((Integer)value);
        }
        break;

      case VERTICE2:
        if (value == null) {
          unsetVertice2();
        } else {
          setVertice2((Integer)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      case DIRECIONADO:
        if (value == null) {
          unsetDirecionado();
        } else {
          setDirecionado((Boolean)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTICE1:
        return Integer.valueOf(getVertice1());

      case VERTICE2:
        return Integer.valueOf(getVertice2());

      case PESO:
        return Double.valueOf(getPeso());

      case DIRECIONADO:
        return Boolean.valueOf(isDirecionado());

      case DESCRICAO:
        return getDescricao();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTICE1:
        return isSetVertice1();
      case VERTICE2:
        return isSetVertice2();
      case PESO:
        return isSetPeso();
      case DIRECIONADO:
        return isSetDirecionado();
      case DESCRICAO:
        return isSetDescricao();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAresta_args)
        return this.equals((updateAresta_args)that);
      return false;
    }

    public boolean equals(updateAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_vertice1 = true;
      boolean that_present_vertice1 = true;
      if (this_present_vertice1 || that_present_vertice1) {
        if (!(this_present_vertice1 && that_present_vertice1))
          return false;
        if (this.vertice1 != that.vertice1)
          return false;
      }

      boolean this_present_vertice2 = true;
      boolean that_present_vertice2 = true;
      if (this_present_vertice2 || that_present_vertice2) {
        if (!(this_present_vertice2 && that_present_vertice2))
          return false;
        if (this.vertice2 != that.vertice2)
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      boolean this_present_direcionado = true;
      boolean that_present_direcionado = true;
      if (this_present_direcionado || that_present_direcionado) {
        if (!(this_present_direcionado && that_present_direcionado))
          return false;
        if (this.direcionado != that.direcionado)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertice1()).compareTo(other.isSetVertice1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice1, other.vertice1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertice2()).compareTo(other.isSetVertice2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice2, other.vertice2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirecionado()).compareTo(other.isSetDirecionado());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirecionado()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direcionado, other.direcionado);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAresta_args(");
      boolean first = true;

      sb.append("vertice1:");
      sb.append(this.vertice1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertice2:");
      sb.append(this.vertice2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      if (!first) sb.append(", ");
      sb.append("direcionado:");
      sb.append(this.direcionado);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAresta_argsStandardSchemeFactory implements SchemeFactory {
      public updateAresta_argsStandardScheme getScheme() {
        return new updateAresta_argsStandardScheme();
      }
    }

    private static class updateAresta_argsStandardScheme extends StandardScheme<updateAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTICE1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice1 = iprot.readI32();
                struct.setVertice1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTICE2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice2 = iprot.readI32();
                struct.setVertice2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DIRECIONADO
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.direcionado = iprot.readBool();
                struct.setDirecionadoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTICE1_FIELD_DESC);
        oprot.writeI32(struct.vertice1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTICE2_FIELD_DESC);
        oprot.writeI32(struct.vertice2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DIRECIONADO_FIELD_DESC);
        oprot.writeBool(struct.direcionado);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAresta_argsTupleSchemeFactory implements SchemeFactory {
      public updateAresta_argsTupleScheme getScheme() {
        return new updateAresta_argsTupleScheme();
      }
    }

    private static class updateAresta_argsTupleScheme extends TupleScheme<updateAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertice1()) {
          optionals.set(0);
        }
        if (struct.isSetVertice2()) {
          optionals.set(1);
        }
        if (struct.isSetPeso()) {
          optionals.set(2);
        }
        if (struct.isSetDirecionado()) {
          optionals.set(3);
        }
        if (struct.isSetDescricao()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetVertice1()) {
          oprot.writeI32(struct.vertice1);
        }
        if (struct.isSetVertice2()) {
          oprot.writeI32(struct.vertice2);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
        if (struct.isSetDirecionado()) {
          oprot.writeBool(struct.direcionado);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.vertice1 = iprot.readI32();
          struct.setVertice1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertice2 = iprot.readI32();
          struct.setVertice2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.direcionado = iprot.readBool();
          struct.setDirecionadoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
      }
    }

  }

  public static class updateAresta_result implements org.apache.thrift.TBase<updateAresta_result, updateAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAresta_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public KeyNotFound knf; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAresta_result.class, metaDataMap);
    }

    public updateAresta_result() {
    }

    public updateAresta_result(
      boolean success,
      KeyNotFound knf,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAresta_result(updateAresta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public updateAresta_result deepCopy() {
      return new updateAresta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
      this.riu = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateAresta_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public updateAresta_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public updateAresta_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case KNF:
        return getKnf();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAresta_result)
        return this.equals((updateAresta_result)that);
      return false;
    }

    public boolean equals(updateAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAresta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAresta_resultStandardSchemeFactory implements SchemeFactory {
      public updateAresta_resultStandardScheme getScheme() {
        return new updateAresta_resultStandardScheme();
      }
    }

    private static class updateAresta_resultStandardScheme extends StandardScheme<updateAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAresta_resultTupleSchemeFactory implements SchemeFactory {
      public updateAresta_resultTupleScheme getScheme() {
        return new updateAresta_resultTupleScheme();
      }
    }

    private static class updateAresta_resultTupleScheme extends TupleScheme<updateAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class readAresta_args implements org.apache.thrift.TBase<readAresta_args, readAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<readAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAresta_args");

    private static final org.apache.thrift.protocol.TField VERTICE1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTICE2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readAresta_argsTupleSchemeFactory());
    }

    public int vertice1; // required
    public int vertice2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTICE1((short)1, "vertice1"),
      VERTICE2((short)2, "vertice2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTICE1
            return VERTICE1;
          case 2: // VERTICE2
            return VERTICE2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTICE1_ISSET_ID = 0;
    private static final int __VERTICE2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTICE1, new org.apache.thrift.meta_data.FieldMetaData("vertice1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTICE2, new org.apache.thrift.meta_data.FieldMetaData("vertice2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAresta_args.class, metaDataMap);
    }

    public readAresta_args() {
    }

    public readAresta_args(
      int vertice1,
      int vertice2)
    {
      this();
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAresta_args(readAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertice1 = other.vertice1;
      this.vertice2 = other.vertice2;
    }

    public readAresta_args deepCopy() {
      return new readAresta_args(this);
    }

    @Override
    public void clear() {
      setVertice1IsSet(false);
      this.vertice1 = 0;
      setVertice2IsSet(false);
      this.vertice2 = 0;
    }

    public int getVertice1() {
      return this.vertice1;
    }

    public readAresta_args setVertice1(int vertice1) {
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      return this;
    }

    public void unsetVertice1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    /** Returns true if field vertice1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    public void setVertice1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE1_ISSET_ID, value);
    }

    public int getVertice2() {
      return this.vertice2;
    }

    public readAresta_args setVertice2(int vertice2) {
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
      return this;
    }

    public void unsetVertice2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    /** Returns true if field vertice2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    public void setVertice2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTICE1:
        if (value == null) {
          unsetVertice1();
        } else {
          setVertice1((Integer)value);
        }
        break;

      case VERTICE2:
        if (value == null) {
          unsetVertice2();
        } else {
          setVertice2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTICE1:
        return Integer.valueOf(getVertice1());

      case VERTICE2:
        return Integer.valueOf(getVertice2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTICE1:
        return isSetVertice1();
      case VERTICE2:
        return isSetVertice2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readAresta_args)
        return this.equals((readAresta_args)that);
      return false;
    }

    public boolean equals(readAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_vertice1 = true;
      boolean that_present_vertice1 = true;
      if (this_present_vertice1 || that_present_vertice1) {
        if (!(this_present_vertice1 && that_present_vertice1))
          return false;
        if (this.vertice1 != that.vertice1)
          return false;
      }

      boolean this_present_vertice2 = true;
      boolean that_present_vertice2 = true;
      if (this_present_vertice2 || that_present_vertice2) {
        if (!(this_present_vertice2 && that_present_vertice2))
          return false;
        if (this.vertice2 != that.vertice2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertice1()).compareTo(other.isSetVertice1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice1, other.vertice1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertice2()).compareTo(other.isSetVertice2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice2, other.vertice2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readAresta_args(");
      boolean first = true;

      sb.append("vertice1:");
      sb.append(this.vertice1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertice2:");
      sb.append(this.vertice2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAresta_argsStandardSchemeFactory implements SchemeFactory {
      public readAresta_argsStandardScheme getScheme() {
        return new readAresta_argsStandardScheme();
      }
    }

    private static class readAresta_argsStandardScheme extends StandardScheme<readAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTICE1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice1 = iprot.readI32();
                struct.setVertice1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTICE2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice2 = iprot.readI32();
                struct.setVertice2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTICE1_FIELD_DESC);
        oprot.writeI32(struct.vertice1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTICE2_FIELD_DESC);
        oprot.writeI32(struct.vertice2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAresta_argsTupleSchemeFactory implements SchemeFactory {
      public readAresta_argsTupleScheme getScheme() {
        return new readAresta_argsTupleScheme();
      }
    }

    private static class readAresta_argsTupleScheme extends TupleScheme<readAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertice1()) {
          optionals.set(0);
        }
        if (struct.isSetVertice2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVertice1()) {
          oprot.writeI32(struct.vertice1);
        }
        if (struct.isSetVertice2()) {
          oprot.writeI32(struct.vertice2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vertice1 = iprot.readI32();
          struct.setVertice1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertice2 = iprot.readI32();
          struct.setVertice2IsSet(true);
        }
      }
    }

  }

  public static class readAresta_result implements org.apache.thrift.TBase<readAresta_result, readAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<readAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readAresta_resultTupleSchemeFactory());
    }

    public Aresta success; // required
    public KeyNotFound knf; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAresta_result.class, metaDataMap);
    }

    public readAresta_result() {
    }

    public readAresta_result(
      Aresta success,
      KeyNotFound knf,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      this.knf = knf;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAresta_result(readAresta_result other) {
      if (other.isSetSuccess()) {
        this.success = new Aresta(other.success);
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public readAresta_result deepCopy() {
      return new readAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
      this.riu = null;
    }

    public Aresta getSuccess() {
      return this.success;
    }

    public readAresta_result setSuccess(Aresta success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readAresta_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public readAresta_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Aresta)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readAresta_result)
        return this.equals((readAresta_result)that);
      return false;
    }

    public boolean equals(readAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAresta_resultStandardSchemeFactory implements SchemeFactory {
      public readAresta_resultStandardScheme getScheme() {
        return new readAresta_resultStandardScheme();
      }
    }

    private static class readAresta_resultStandardScheme extends StandardScheme<readAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Aresta();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAresta_resultTupleSchemeFactory implements SchemeFactory {
      public readAresta_resultTupleScheme getScheme() {
        return new readAresta_resultTupleScheme();
      }
    }

    private static class readAresta_resultTupleScheme extends TupleScheme<readAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Aresta();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class listVerticesFromAresta_args implements org.apache.thrift.TBase<listVerticesFromAresta_args, listVerticesFromAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<listVerticesFromAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listVerticesFromAresta_args");

    private static final org.apache.thrift.protocol.TField VERTICE1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTICE2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listVerticesFromAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listVerticesFromAresta_argsTupleSchemeFactory());
    }

    public int vertice1; // required
    public int vertice2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTICE1((short)1, "vertice1"),
      VERTICE2((short)2, "vertice2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTICE1
            return VERTICE1;
          case 2: // VERTICE2
            return VERTICE2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTICE1_ISSET_ID = 0;
    private static final int __VERTICE2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTICE1, new org.apache.thrift.meta_data.FieldMetaData("vertice1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTICE2, new org.apache.thrift.meta_data.FieldMetaData("vertice2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listVerticesFromAresta_args.class, metaDataMap);
    }

    public listVerticesFromAresta_args() {
    }

    public listVerticesFromAresta_args(
      int vertice1,
      int vertice2)
    {
      this();
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listVerticesFromAresta_args(listVerticesFromAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertice1 = other.vertice1;
      this.vertice2 = other.vertice2;
    }

    public listVerticesFromAresta_args deepCopy() {
      return new listVerticesFromAresta_args(this);
    }

    @Override
    public void clear() {
      setVertice1IsSet(false);
      this.vertice1 = 0;
      setVertice2IsSet(false);
      this.vertice2 = 0;
    }

    public int getVertice1() {
      return this.vertice1;
    }

    public listVerticesFromAresta_args setVertice1(int vertice1) {
      this.vertice1 = vertice1;
      setVertice1IsSet(true);
      return this;
    }

    public void unsetVertice1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    /** Returns true if field vertice1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE1_ISSET_ID);
    }

    public void setVertice1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE1_ISSET_ID, value);
    }

    public int getVertice2() {
      return this.vertice2;
    }

    public listVerticesFromAresta_args setVertice2(int vertice2) {
      this.vertice2 = vertice2;
      setVertice2IsSet(true);
      return this;
    }

    public void unsetVertice2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    /** Returns true if field vertice2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertice2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTICE2_ISSET_ID);
    }

    public void setVertice2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTICE2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTICE1:
        if (value == null) {
          unsetVertice1();
        } else {
          setVertice1((Integer)value);
        }
        break;

      case VERTICE2:
        if (value == null) {
          unsetVertice2();
        } else {
          setVertice2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTICE1:
        return Integer.valueOf(getVertice1());

      case VERTICE2:
        return Integer.valueOf(getVertice2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTICE1:
        return isSetVertice1();
      case VERTICE2:
        return isSetVertice2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listVerticesFromAresta_args)
        return this.equals((listVerticesFromAresta_args)that);
      return false;
    }

    public boolean equals(listVerticesFromAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_vertice1 = true;
      boolean that_present_vertice1 = true;
      if (this_present_vertice1 || that_present_vertice1) {
        if (!(this_present_vertice1 && that_present_vertice1))
          return false;
        if (this.vertice1 != that.vertice1)
          return false;
      }

      boolean this_present_vertice2 = true;
      boolean that_present_vertice2 = true;
      if (this_present_vertice2 || that_present_vertice2) {
        if (!(this_present_vertice2 && that_present_vertice2))
          return false;
        if (this.vertice2 != that.vertice2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listVerticesFromAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertice1()).compareTo(other.isSetVertice1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice1, other.vertice1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertice2()).compareTo(other.isSetVertice2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertice2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice2, other.vertice2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listVerticesFromAresta_args(");
      boolean first = true;

      sb.append("vertice1:");
      sb.append(this.vertice1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertice2:");
      sb.append(this.vertice2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listVerticesFromAresta_argsStandardSchemeFactory implements SchemeFactory {
      public listVerticesFromAresta_argsStandardScheme getScheme() {
        return new listVerticesFromAresta_argsStandardScheme();
      }
    }

    private static class listVerticesFromAresta_argsStandardScheme extends StandardScheme<listVerticesFromAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listVerticesFromAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTICE1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice1 = iprot.readI32();
                struct.setVertice1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTICE2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertice2 = iprot.readI32();
                struct.setVertice2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listVerticesFromAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTICE1_FIELD_DESC);
        oprot.writeI32(struct.vertice1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTICE2_FIELD_DESC);
        oprot.writeI32(struct.vertice2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listVerticesFromAresta_argsTupleSchemeFactory implements SchemeFactory {
      public listVerticesFromAresta_argsTupleScheme getScheme() {
        return new listVerticesFromAresta_argsTupleScheme();
      }
    }

    private static class listVerticesFromAresta_argsTupleScheme extends TupleScheme<listVerticesFromAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listVerticesFromAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertice1()) {
          optionals.set(0);
        }
        if (struct.isSetVertice2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVertice1()) {
          oprot.writeI32(struct.vertice1);
        }
        if (struct.isSetVertice2()) {
          oprot.writeI32(struct.vertice2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listVerticesFromAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vertice1 = iprot.readI32();
          struct.setVertice1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertice2 = iprot.readI32();
          struct.setVertice2IsSet(true);
        }
      }
    }

  }

  public static class listVerticesFromAresta_result implements org.apache.thrift.TBase<listVerticesFromAresta_result, listVerticesFromAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<listVerticesFromAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listVerticesFromAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listVerticesFromAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listVerticesFromAresta_resultTupleSchemeFactory());
    }

    public List<Vertice> success; // required
    public KeyNotFound knf; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listVerticesFromAresta_result.class, metaDataMap);
    }

    public listVerticesFromAresta_result() {
    }

    public listVerticesFromAresta_result(
      List<Vertice> success,
      KeyNotFound knf,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      this.knf = knf;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listVerticesFromAresta_result(listVerticesFromAresta_result other) {
      if (other.isSetSuccess()) {
        List<Vertice> __this__success = new ArrayList<Vertice>(other.success.size());
        for (Vertice other_element : other.success) {
          __this__success.add(new Vertice(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public listVerticesFromAresta_result deepCopy() {
      return new listVerticesFromAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
      this.riu = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertice> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertice elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertice>();
      }
      this.success.add(elem);
    }

    public List<Vertice> getSuccess() {
      return this.success;
    }

    public listVerticesFromAresta_result setSuccess(List<Vertice> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public listVerticesFromAresta_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public listVerticesFromAresta_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertice>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listVerticesFromAresta_result)
        return this.equals((listVerticesFromAresta_result)that);
      return false;
    }

    public boolean equals(listVerticesFromAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listVerticesFromAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listVerticesFromAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listVerticesFromAresta_resultStandardSchemeFactory implements SchemeFactory {
      public listVerticesFromAresta_resultStandardScheme getScheme() {
        return new listVerticesFromAresta_resultStandardScheme();
      }
    }

    private static class listVerticesFromAresta_resultStandardScheme extends StandardScheme<listVerticesFromAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listVerticesFromAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertice>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    Vertice _elem18;
                    _elem18 = new Vertice();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listVerticesFromAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertice _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listVerticesFromAresta_resultTupleSchemeFactory implements SchemeFactory {
      public listVerticesFromAresta_resultTupleScheme getScheme() {
        return new listVerticesFromAresta_resultTupleScheme();
      }
    }

    private static class listVerticesFromAresta_resultTupleScheme extends TupleScheme<listVerticesFromAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listVerticesFromAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertice _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listVerticesFromAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertice>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              Vertice _elem23;
              _elem23 = new Vertice();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class listArestasFromVertice_args implements org.apache.thrift.TBase<listArestasFromVertice_args, listArestasFromVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<listArestasFromVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listArestasFromVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listArestasFromVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listArestasFromVertice_argsTupleSchemeFactory());
    }

    public int nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listArestasFromVertice_args.class, metaDataMap);
    }

    public listArestasFromVertice_args() {
    }

    public listArestasFromVertice_args(
      int nome)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listArestasFromVertice_args(listArestasFromVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
    }

    public listArestasFromVertice_args deepCopy() {
      return new listArestasFromVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
    }

    public int getNome() {
      return this.nome;
    }

    public listArestasFromVertice_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Integer.valueOf(getNome());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listArestasFromVertice_args)
        return this.equals((listArestasFromVertice_args)that);
      return false;
    }

    public boolean equals(listArestasFromVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listArestasFromVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listArestasFromVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listArestasFromVertice_argsStandardSchemeFactory implements SchemeFactory {
      public listArestasFromVertice_argsStandardScheme getScheme() {
        return new listArestasFromVertice_argsStandardScheme();
      }
    }

    private static class listArestasFromVertice_argsStandardScheme extends StandardScheme<listArestasFromVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listArestasFromVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listArestasFromVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listArestasFromVertice_argsTupleSchemeFactory implements SchemeFactory {
      public listArestasFromVertice_argsTupleScheme getScheme() {
        return new listArestasFromVertice_argsTupleScheme();
      }
    }

    private static class listArestasFromVertice_argsTupleScheme extends TupleScheme<listArestasFromVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listArestasFromVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listArestasFromVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
      }
    }

  }

  public static class listArestasFromVertice_result implements org.apache.thrift.TBase<listArestasFromVertice_result, listArestasFromVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<listArestasFromVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listArestasFromVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listArestasFromVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listArestasFromVertice_resultTupleSchemeFactory());
    }

    public List<Aresta> success; // required
    public KeyNotFound knf; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listArestasFromVertice_result.class, metaDataMap);
    }

    public listArestasFromVertice_result() {
    }

    public listArestasFromVertice_result(
      List<Aresta> success,
      KeyNotFound knf,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      this.knf = knf;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listArestasFromVertice_result(listArestasFromVertice_result other) {
      if (other.isSetSuccess()) {
        List<Aresta> __this__success = new ArrayList<Aresta>(other.success.size());
        for (Aresta other_element : other.success) {
          __this__success.add(new Aresta(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public listArestasFromVertice_result deepCopy() {
      return new listArestasFromVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
      this.riu = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Aresta> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Aresta elem) {
      if (this.success == null) {
        this.success = new ArrayList<Aresta>();
      }
      this.success.add(elem);
    }

    public List<Aresta> getSuccess() {
      return this.success;
    }

    public listArestasFromVertice_result setSuccess(List<Aresta> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public listArestasFromVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public listArestasFromVertice_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Aresta>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listArestasFromVertice_result)
        return this.equals((listArestasFromVertice_result)that);
      return false;
    }

    public boolean equals(listArestasFromVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listArestasFromVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listArestasFromVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listArestasFromVertice_resultStandardSchemeFactory implements SchemeFactory {
      public listArestasFromVertice_resultStandardScheme getScheme() {
        return new listArestasFromVertice_resultStandardScheme();
      }
    }

    private static class listArestasFromVertice_resultStandardScheme extends StandardScheme<listArestasFromVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listArestasFromVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Aresta>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Aresta _elem26;
                    _elem26 = new Aresta();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listArestasFromVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Aresta _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listArestasFromVertice_resultTupleSchemeFactory implements SchemeFactory {
      public listArestasFromVertice_resultTupleScheme getScheme() {
        return new listArestasFromVertice_resultTupleScheme();
      }
    }

    private static class listArestasFromVertice_resultTupleScheme extends TupleScheme<listArestasFromVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listArestasFromVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Aresta _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listArestasFromVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Aresta>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              Aresta _elem31;
              _elem31 = new Aresta();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class listNeighbors_args implements org.apache.thrift.TBase<listNeighbors_args, listNeighbors_args._Fields>, java.io.Serializable, Cloneable, Comparable<listNeighbors_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listNeighbors_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listNeighbors_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listNeighbors_argsTupleSchemeFactory());
    }

    public int nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listNeighbors_args.class, metaDataMap);
    }

    public listNeighbors_args() {
    }

    public listNeighbors_args(
      int nome)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNeighbors_args(listNeighbors_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
    }

    public listNeighbors_args deepCopy() {
      return new listNeighbors_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
    }

    public int getNome() {
      return this.nome;
    }

    public listNeighbors_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Integer.valueOf(getNome());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNeighbors_args)
        return this.equals((listNeighbors_args)that);
      return false;
    }

    public boolean equals(listNeighbors_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listNeighbors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listNeighbors_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listNeighbors_argsStandardSchemeFactory implements SchemeFactory {
      public listNeighbors_argsStandardScheme getScheme() {
        return new listNeighbors_argsStandardScheme();
      }
    }

    private static class listNeighbors_argsStandardScheme extends StandardScheme<listNeighbors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listNeighbors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listNeighbors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listNeighbors_argsTupleSchemeFactory implements SchemeFactory {
      public listNeighbors_argsTupleScheme getScheme() {
        return new listNeighbors_argsTupleScheme();
      }
    }

    private static class listNeighbors_argsTupleScheme extends TupleScheme<listNeighbors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listNeighbors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listNeighbors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
      }
    }

  }

  public static class listNeighbors_result implements org.apache.thrift.TBase<listNeighbors_result, listNeighbors_result._Fields>, java.io.Serializable, Cloneable, Comparable<listNeighbors_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listNeighbors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RIU_FIELD_DESC = new org.apache.thrift.protocol.TField("riu", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listNeighbors_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listNeighbors_resultTupleSchemeFactory());
    }

    public List<Vertice> success; // required
    public KeyNotFound knf; // required
    public ResourceInUse riu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf"),
      RIU((short)2, "riu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          case 2: // RIU
            return RIU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RIU, new org.apache.thrift.meta_data.FieldMetaData("riu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listNeighbors_result.class, metaDataMap);
    }

    public listNeighbors_result() {
    }

    public listNeighbors_result(
      List<Vertice> success,
      KeyNotFound knf,
      ResourceInUse riu)
    {
      this();
      this.success = success;
      this.knf = knf;
      this.riu = riu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNeighbors_result(listNeighbors_result other) {
      if (other.isSetSuccess()) {
        List<Vertice> __this__success = new ArrayList<Vertice>(other.success.size());
        for (Vertice other_element : other.success) {
          __this__success.add(new Vertice(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
      if (other.isSetRiu()) {
        this.riu = new ResourceInUse(other.riu);
      }
    }

    public listNeighbors_result deepCopy() {
      return new listNeighbors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
      this.riu = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertice> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertice elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertice>();
      }
      this.success.add(elem);
    }

    public List<Vertice> getSuccess() {
      return this.success;
    }

    public listNeighbors_result setSuccess(List<Vertice> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public listNeighbors_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public ResourceInUse getRiu() {
      return this.riu;
    }

    public listNeighbors_result setRiu(ResourceInUse riu) {
      this.riu = riu;
      return this;
    }

    public void unsetRiu() {
      this.riu = null;
    }

    /** Returns true if field riu is set (has been assigned a value) and false otherwise */
    public boolean isSetRiu() {
      return this.riu != null;
    }

    public void setRiuIsSet(boolean value) {
      if (!value) {
        this.riu = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertice>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      case RIU:
        if (value == null) {
          unsetRiu();
        } else {
          setRiu((ResourceInUse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      case RIU:
        return getRiu();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      case RIU:
        return isSetRiu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNeighbors_result)
        return this.equals((listNeighbors_result)that);
      return false;
    }

    public boolean equals(listNeighbors_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      boolean this_present_riu = true && this.isSetRiu();
      boolean that_present_riu = true && that.isSetRiu();
      if (this_present_riu || that_present_riu) {
        if (!(this_present_riu && that_present_riu))
          return false;
        if (!this.riu.equals(that.riu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listNeighbors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiu()).compareTo(other.isSetRiu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riu, other.riu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listNeighbors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("riu:");
      if (this.riu == null) {
        sb.append("null");
      } else {
        sb.append(this.riu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listNeighbors_resultStandardSchemeFactory implements SchemeFactory {
      public listNeighbors_resultStandardScheme getScheme() {
        return new listNeighbors_resultStandardScheme();
      }
    }

    private static class listNeighbors_resultStandardScheme extends StandardScheme<listNeighbors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listNeighbors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertice>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    Vertice _elem34;
                    _elem34 = new Vertice();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RIU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.riu = new ResourceInUse();
                struct.riu.read(iprot);
                struct.setRiuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listNeighbors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertice _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.riu != null) {
          oprot.writeFieldBegin(RIU_FIELD_DESC);
          struct.riu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listNeighbors_resultTupleSchemeFactory implements SchemeFactory {
      public listNeighbors_resultTupleScheme getScheme() {
        return new listNeighbors_resultTupleScheme();
      }
    }

    private static class listNeighbors_resultTupleScheme extends TupleScheme<listNeighbors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listNeighbors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        if (struct.isSetRiu()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertice _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
        if (struct.isSetRiu()) {
          struct.riu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listNeighbors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertice>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              Vertice _elem39;
              _elem39 = new Vertice();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.riu = new ResourceInUse();
          struct.riu.read(iprot);
          struct.setRiuIsSet(true);
        }
      }
    }

  }

  public static class listVertices_args implements org.apache.thrift.TBase<listVertices_args, listVertices_args._Fields>, java.io.Serializable, Cloneable, Comparable<listVertices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listVertices_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listVertices_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listVertices_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listVertices_args.class, metaDataMap);
    }

    public listVertices_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listVertices_args(listVertices_args other) {
    }

    public listVertices_args deepCopy() {
      return new listVertices_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listVertices_args)
        return this.equals((listVertices_args)that);
      return false;
    }

    public boolean equals(listVertices_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listVertices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listVertices_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listVertices_argsStandardSchemeFactory implements SchemeFactory {
      public listVertices_argsStandardScheme getScheme() {
        return new listVertices_argsStandardScheme();
      }
    }

    private static class listVertices_argsStandardScheme extends StandardScheme<listVertices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listVertices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listVertices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listVertices_argsTupleSchemeFactory implements SchemeFactory {
      public listVertices_argsTupleScheme getScheme() {
        return new listVertices_argsTupleScheme();
      }
    }

    private static class listVertices_argsTupleScheme extends TupleScheme<listVertices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listVertices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listVertices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listVertices_result implements org.apache.thrift.TBase<listVertices_result, listVertices_result._Fields>, java.io.Serializable, Cloneable, Comparable<listVertices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listVertices_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listVertices_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listVertices_resultTupleSchemeFactory());
    }

    public List<Vertice> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listVertices_result.class, metaDataMap);
    }

    public listVertices_result() {
    }

    public listVertices_result(
      List<Vertice> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listVertices_result(listVertices_result other) {
      if (other.isSetSuccess()) {
        List<Vertice> __this__success = new ArrayList<Vertice>(other.success.size());
        for (Vertice other_element : other.success) {
          __this__success.add(new Vertice(other_element));
        }
        this.success = __this__success;
      }
    }

    public listVertices_result deepCopy() {
      return new listVertices_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertice> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertice elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertice>();
      }
      this.success.add(elem);
    }

    public List<Vertice> getSuccess() {
      return this.success;
    }

    public listVertices_result setSuccess(List<Vertice> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertice>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listVertices_result)
        return this.equals((listVertices_result)that);
      return false;
    }

    public boolean equals(listVertices_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listVertices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listVertices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listVertices_resultStandardSchemeFactory implements SchemeFactory {
      public listVertices_resultStandardScheme getScheme() {
        return new listVertices_resultStandardScheme();
      }
    }

    private static class listVertices_resultStandardScheme extends StandardScheme<listVertices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listVertices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertice>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    Vertice _elem42;
                    _elem42 = new Vertice();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listVertices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertice _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listVertices_resultTupleSchemeFactory implements SchemeFactory {
      public listVertices_resultTupleScheme getScheme() {
        return new listVertices_resultTupleScheme();
      }
    }

    private static class listVertices_resultTupleScheme extends TupleScheme<listVertices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listVertices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertice _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listVertices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertice>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              Vertice _elem47;
              _elem47 = new Vertice();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listArestas_args implements org.apache.thrift.TBase<listArestas_args, listArestas_args._Fields>, java.io.Serializable, Cloneable, Comparable<listArestas_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listArestas_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listArestas_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listArestas_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listArestas_args.class, metaDataMap);
    }

    public listArestas_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listArestas_args(listArestas_args other) {
    }

    public listArestas_args deepCopy() {
      return new listArestas_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listArestas_args)
        return this.equals((listArestas_args)that);
      return false;
    }

    public boolean equals(listArestas_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listArestas_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listArestas_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listArestas_argsStandardSchemeFactory implements SchemeFactory {
      public listArestas_argsStandardScheme getScheme() {
        return new listArestas_argsStandardScheme();
      }
    }

    private static class listArestas_argsStandardScheme extends StandardScheme<listArestas_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listArestas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listArestas_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listArestas_argsTupleSchemeFactory implements SchemeFactory {
      public listArestas_argsTupleScheme getScheme() {
        return new listArestas_argsTupleScheme();
      }
    }

    private static class listArestas_argsTupleScheme extends TupleScheme<listArestas_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listArestas_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listArestas_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listArestas_result implements org.apache.thrift.TBase<listArestas_result, listArestas_result._Fields>, java.io.Serializable, Cloneable, Comparable<listArestas_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listArestas_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listArestas_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listArestas_resultTupleSchemeFactory());
    }

    public List<Aresta> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listArestas_result.class, metaDataMap);
    }

    public listArestas_result() {
    }

    public listArestas_result(
      List<Aresta> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listArestas_result(listArestas_result other) {
      if (other.isSetSuccess()) {
        List<Aresta> __this__success = new ArrayList<Aresta>(other.success.size());
        for (Aresta other_element : other.success) {
          __this__success.add(new Aresta(other_element));
        }
        this.success = __this__success;
      }
    }

    public listArestas_result deepCopy() {
      return new listArestas_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Aresta> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Aresta elem) {
      if (this.success == null) {
        this.success = new ArrayList<Aresta>();
      }
      this.success.add(elem);
    }

    public List<Aresta> getSuccess() {
      return this.success;
    }

    public listArestas_result setSuccess(List<Aresta> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Aresta>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listArestas_result)
        return this.equals((listArestas_result)that);
      return false;
    }

    public boolean equals(listArestas_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listArestas_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listArestas_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listArestas_resultStandardSchemeFactory implements SchemeFactory {
      public listArestas_resultStandardScheme getScheme() {
        return new listArestas_resultStandardScheme();
      }
    }

    private static class listArestas_resultStandardScheme extends StandardScheme<listArestas_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listArestas_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<Aresta>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    Aresta _elem50;
                    _elem50 = new Aresta();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listArestas_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Aresta _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listArestas_resultTupleSchemeFactory implements SchemeFactory {
      public listArestas_resultTupleScheme getScheme() {
        return new listArestas_resultTupleScheme();
      }
    }

    private static class listArestas_resultTupleScheme extends TupleScheme<listArestas_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listArestas_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Aresta _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listArestas_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Aresta>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              Aresta _elem55;
              _elem55 = new Aresta();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
