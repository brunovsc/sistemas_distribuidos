/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package graphservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Vertice implements org.apache.thrift.TBase<Vertice, Vertice._Fields>, java.io.Serializable, Cloneable, Comparable<Vertice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Vertice");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IDADE_FIELD_DESC = new org.apache.thrift.protocol.TField("idade", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CIDADE_ATUAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cidade_atual", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTATO_FIELD_DESC = new org.apache.thrift.protocol.TField("contato", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VerticeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VerticeTupleSchemeFactory());
  }

  public int id; // required
  public String nome; // required
  public int idade; // required
  public String cidade_atual; // required
  public String contato; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NOME((short)2, "nome"),
    IDADE((short)3, "idade"),
    CIDADE_ATUAL((short)4, "cidade_atual"),
    CONTATO((short)5, "contato");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NOME
          return NOME;
        case 3: // IDADE
          return IDADE;
        case 4: // CIDADE_ATUAL
          return CIDADE_ATUAL;
        case 5: // CONTATO
          return CONTATO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __IDADE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDADE, new org.apache.thrift.meta_data.FieldMetaData("idade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CIDADE_ATUAL, new org.apache.thrift.meta_data.FieldMetaData("cidade_atual", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTATO, new org.apache.thrift.meta_data.FieldMetaData("contato", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Vertice.class, metaDataMap);
  }

  public Vertice() {
  }

  public Vertice(
    int id,
    String nome,
    int idade,
    String cidade_atual,
    String contato)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.nome = nome;
    this.idade = idade;
    setIdadeIsSet(true);
    this.cidade_atual = cidade_atual;
    this.contato = contato;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Vertice(Vertice other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetNome()) {
      this.nome = other.nome;
    }
    this.idade = other.idade;
    if (other.isSetCidade_atual()) {
      this.cidade_atual = other.cidade_atual;
    }
    if (other.isSetContato()) {
      this.contato = other.contato;
    }
  }

  public Vertice deepCopy() {
    return new Vertice(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.nome = null;
    setIdadeIsSet(false);
    this.idade = 0;
    this.cidade_atual = null;
    this.contato = null;
  }

  public int getId() {
    return this.id;
  }

  public Vertice setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getNome() {
    return this.nome;
  }

  public Vertice setNome(String nome) {
    this.nome = nome;
    return this;
  }

  public void unsetNome() {
    this.nome = null;
  }

  /** Returns true if field nome is set (has been assigned a value) and false otherwise */
  public boolean isSetNome() {
    return this.nome != null;
  }

  public void setNomeIsSet(boolean value) {
    if (!value) {
      this.nome = null;
    }
  }

  public int getIdade() {
    return this.idade;
  }

  public Vertice setIdade(int idade) {
    this.idade = idade;
    setIdadeIsSet(true);
    return this;
  }

  public void unsetIdade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDADE_ISSET_ID);
  }

  /** Returns true if field idade is set (has been assigned a value) and false otherwise */
  public boolean isSetIdade() {
    return EncodingUtils.testBit(__isset_bitfield, __IDADE_ISSET_ID);
  }

  public void setIdadeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDADE_ISSET_ID, value);
  }

  public String getCidade_atual() {
    return this.cidade_atual;
  }

  public Vertice setCidade_atual(String cidade_atual) {
    this.cidade_atual = cidade_atual;
    return this;
  }

  public void unsetCidade_atual() {
    this.cidade_atual = null;
  }

  /** Returns true if field cidade_atual is set (has been assigned a value) and false otherwise */
  public boolean isSetCidade_atual() {
    return this.cidade_atual != null;
  }

  public void setCidade_atualIsSet(boolean value) {
    if (!value) {
      this.cidade_atual = null;
    }
  }

  public String getContato() {
    return this.contato;
  }

  public Vertice setContato(String contato) {
    this.contato = contato;
    return this;
  }

  public void unsetContato() {
    this.contato = null;
  }

  /** Returns true if field contato is set (has been assigned a value) and false otherwise */
  public boolean isSetContato() {
    return this.contato != null;
  }

  public void setContatoIsSet(boolean value) {
    if (!value) {
      this.contato = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NOME:
      if (value == null) {
        unsetNome();
      } else {
        setNome((String)value);
      }
      break;

    case IDADE:
      if (value == null) {
        unsetIdade();
      } else {
        setIdade((Integer)value);
      }
      break;

    case CIDADE_ATUAL:
      if (value == null) {
        unsetCidade_atual();
      } else {
        setCidade_atual((String)value);
      }
      break;

    case CONTATO:
      if (value == null) {
        unsetContato();
      } else {
        setContato((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NOME:
      return getNome();

    case IDADE:
      return Integer.valueOf(getIdade());

    case CIDADE_ATUAL:
      return getCidade_atual();

    case CONTATO:
      return getContato();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NOME:
      return isSetNome();
    case IDADE:
      return isSetIdade();
    case CIDADE_ATUAL:
      return isSetCidade_atual();
    case CONTATO:
      return isSetContato();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Vertice)
      return this.equals((Vertice)that);
    return false;
  }

  public boolean equals(Vertice that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_nome = true && this.isSetNome();
    boolean that_present_nome = true && that.isSetNome();
    if (this_present_nome || that_present_nome) {
      if (!(this_present_nome && that_present_nome))
        return false;
      if (!this.nome.equals(that.nome))
        return false;
    }

    boolean this_present_idade = true;
    boolean that_present_idade = true;
    if (this_present_idade || that_present_idade) {
      if (!(this_present_idade && that_present_idade))
        return false;
      if (this.idade != that.idade)
        return false;
    }

    boolean this_present_cidade_atual = true && this.isSetCidade_atual();
    boolean that_present_cidade_atual = true && that.isSetCidade_atual();
    if (this_present_cidade_atual || that_present_cidade_atual) {
      if (!(this_present_cidade_atual && that_present_cidade_atual))
        return false;
      if (!this.cidade_atual.equals(that.cidade_atual))
        return false;
    }

    boolean this_present_contato = true && this.isSetContato();
    boolean that_present_contato = true && that.isSetContato();
    if (this_present_contato || that_present_contato) {
      if (!(this_present_contato && that_present_contato))
        return false;
      if (!this.contato.equals(that.contato))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Vertice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdade()).compareTo(other.isSetIdade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idade, other.idade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCidade_atual()).compareTo(other.isSetCidade_atual());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCidade_atual()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cidade_atual, other.cidade_atual);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContato()).compareTo(other.isSetContato());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContato()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contato, other.contato);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Vertice(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nome:");
    if (this.nome == null) {
      sb.append("null");
    } else {
      sb.append(this.nome);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idade:");
    sb.append(this.idade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cidade_atual:");
    if (this.cidade_atual == null) {
      sb.append("null");
    } else {
      sb.append(this.cidade_atual);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contato:");
    if (this.contato == null) {
      sb.append("null");
    } else {
      sb.append(this.contato);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VerticeStandardSchemeFactory implements SchemeFactory {
    public VerticeStandardScheme getScheme() {
      return new VerticeStandardScheme();
    }
  }

  private static class VerticeStandardScheme extends StandardScheme<Vertice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Vertice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nome = iprot.readString();
              struct.setNomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idade = iprot.readI32();
              struct.setIdadeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CIDADE_ATUAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cidade_atual = iprot.readString();
              struct.setCidade_atualIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTATO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contato = iprot.readString();
              struct.setContatoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Vertice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.nome != null) {
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeString(struct.nome);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IDADE_FIELD_DESC);
      oprot.writeI32(struct.idade);
      oprot.writeFieldEnd();
      if (struct.cidade_atual != null) {
        oprot.writeFieldBegin(CIDADE_ATUAL_FIELD_DESC);
        oprot.writeString(struct.cidade_atual);
        oprot.writeFieldEnd();
      }
      if (struct.contato != null) {
        oprot.writeFieldBegin(CONTATO_FIELD_DESC);
        oprot.writeString(struct.contato);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VerticeTupleSchemeFactory implements SchemeFactory {
    public VerticeTupleScheme getScheme() {
      return new VerticeTupleScheme();
    }
  }

  private static class VerticeTupleScheme extends TupleScheme<Vertice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Vertice struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNome()) {
        optionals.set(1);
      }
      if (struct.isSetIdade()) {
        optionals.set(2);
      }
      if (struct.isSetCidade_atual()) {
        optionals.set(3);
      }
      if (struct.isSetContato()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNome()) {
        oprot.writeString(struct.nome);
      }
      if (struct.isSetIdade()) {
        oprot.writeI32(struct.idade);
      }
      if (struct.isSetCidade_atual()) {
        oprot.writeString(struct.cidade_atual);
      }
      if (struct.isSetContato()) {
        oprot.writeString(struct.contato);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Vertice struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nome = iprot.readString();
        struct.setNomeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.idade = iprot.readI32();
        struct.setIdadeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cidade_atual = iprot.readString();
        struct.setCidade_atualIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contato = iprot.readString();
        struct.setContatoIsSet(true);
      }
    }
  }

}

