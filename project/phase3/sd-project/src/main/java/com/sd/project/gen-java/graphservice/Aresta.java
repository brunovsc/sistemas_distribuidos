/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package graphservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Aresta implements org.apache.thrift.TBase<Aresta, Aresta._Fields>, java.io.Serializable, Cloneable, Comparable<Aresta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Aresta");

  private static final org.apache.thrift.protocol.TField PESSOA1_FIELD_DESC = new org.apache.thrift.protocol.TField("pessoa1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PESSOA2_FIELD_DESC = new org.apache.thrift.protocol.TField("pessoa2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DISTANCIA_FIELD_DESC = new org.apache.thrift.protocol.TField("distancia", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DIRECIONADO_FIELD_DESC = new org.apache.thrift.protocol.TField("direcionado", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ArestaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ArestaTupleSchemeFactory());
  }

  public int pessoa1; // required
  public int pessoa2; // required
  public double distancia; // required
  public boolean direcionado; // required
  public String descricao; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PESSOA1((short)1, "pessoa1"),
    PESSOA2((short)2, "pessoa2"),
    DISTANCIA((short)3, "distancia"),
    DIRECIONADO((short)4, "direcionado"),
    DESCRICAO((short)5, "descricao");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PESSOA1
          return PESSOA1;
        case 2: // PESSOA2
          return PESSOA2;
        case 3: // DISTANCIA
          return DISTANCIA;
        case 4: // DIRECIONADO
          return DIRECIONADO;
        case 5: // DESCRICAO
          return DESCRICAO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PESSOA1_ISSET_ID = 0;
  private static final int __PESSOA2_ISSET_ID = 1;
  private static final int __DISTANCIA_ISSET_ID = 2;
  private static final int __DIRECIONADO_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PESSOA1, new org.apache.thrift.meta_data.FieldMetaData("pessoa1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PESSOA2, new org.apache.thrift.meta_data.FieldMetaData("pessoa2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISTANCIA, new org.apache.thrift.meta_data.FieldMetaData("distancia", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DIRECIONADO, new org.apache.thrift.meta_data.FieldMetaData("direcionado", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Aresta.class, metaDataMap);
  }

  public Aresta() {
  }

  public Aresta(
    int pessoa1,
    int pessoa2,
    double distancia,
    boolean direcionado,
    String descricao)
  {
    this();
    this.pessoa1 = pessoa1;
    setPessoa1IsSet(true);
    this.pessoa2 = pessoa2;
    setPessoa2IsSet(true);
    this.distancia = distancia;
    setDistanciaIsSet(true);
    this.direcionado = direcionado;
    setDirecionadoIsSet(true);
    this.descricao = descricao;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Aresta(Aresta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pessoa1 = other.pessoa1;
    this.pessoa2 = other.pessoa2;
    this.distancia = other.distancia;
    this.direcionado = other.direcionado;
    if (other.isSetDescricao()) {
      this.descricao = other.descricao;
    }
  }

  public Aresta deepCopy() {
    return new Aresta(this);
  }

  @Override
  public void clear() {
    setPessoa1IsSet(false);
    this.pessoa1 = 0;
    setPessoa2IsSet(false);
    this.pessoa2 = 0;
    setDistanciaIsSet(false);
    this.distancia = 0.0;
    setDirecionadoIsSet(false);
    this.direcionado = false;
    this.descricao = null;
  }

  public int getPessoa1() {
    return this.pessoa1;
  }

  public Aresta setPessoa1(int pessoa1) {
    this.pessoa1 = pessoa1;
    setPessoa1IsSet(true);
    return this;
  }

  public void unsetPessoa1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESSOA1_ISSET_ID);
  }

  /** Returns true if field pessoa1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPessoa1() {
    return EncodingUtils.testBit(__isset_bitfield, __PESSOA1_ISSET_ID);
  }

  public void setPessoa1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESSOA1_ISSET_ID, value);
  }

  public int getPessoa2() {
    return this.pessoa2;
  }

  public Aresta setPessoa2(int pessoa2) {
    this.pessoa2 = pessoa2;
    setPessoa2IsSet(true);
    return this;
  }

  public void unsetPessoa2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESSOA2_ISSET_ID);
  }

  /** Returns true if field pessoa2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPessoa2() {
    return EncodingUtils.testBit(__isset_bitfield, __PESSOA2_ISSET_ID);
  }

  public void setPessoa2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESSOA2_ISSET_ID, value);
  }

  public double getDistancia() {
    return this.distancia;
  }

  public Aresta setDistancia(double distancia) {
    this.distancia = distancia;
    setDistanciaIsSet(true);
    return this;
  }

  public void unsetDistancia() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTANCIA_ISSET_ID);
  }

  /** Returns true if field distancia is set (has been assigned a value) and false otherwise */
  public boolean isSetDistancia() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTANCIA_ISSET_ID);
  }

  public void setDistanciaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTANCIA_ISSET_ID, value);
  }

  public boolean isDirecionado() {
    return this.direcionado;
  }

  public Aresta setDirecionado(boolean direcionado) {
    this.direcionado = direcionado;
    setDirecionadoIsSet(true);
    return this;
  }

  public void unsetDirecionado() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
  }

  /** Returns true if field direcionado is set (has been assigned a value) and false otherwise */
  public boolean isSetDirecionado() {
    return EncodingUtils.testBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
  }

  public void setDirecionadoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECIONADO_ISSET_ID, value);
  }

  public String getDescricao() {
    return this.descricao;
  }

  public Aresta setDescricao(String descricao) {
    this.descricao = descricao;
    return this;
  }

  public void unsetDescricao() {
    this.descricao = null;
  }

  /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
  public boolean isSetDescricao() {
    return this.descricao != null;
  }

  public void setDescricaoIsSet(boolean value) {
    if (!value) {
      this.descricao = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PESSOA1:
      if (value == null) {
        unsetPessoa1();
      } else {
        setPessoa1((Integer)value);
      }
      break;

    case PESSOA2:
      if (value == null) {
        unsetPessoa2();
      } else {
        setPessoa2((Integer)value);
      }
      break;

    case DISTANCIA:
      if (value == null) {
        unsetDistancia();
      } else {
        setDistancia((Double)value);
      }
      break;

    case DIRECIONADO:
      if (value == null) {
        unsetDirecionado();
      } else {
        setDirecionado((Boolean)value);
      }
      break;

    case DESCRICAO:
      if (value == null) {
        unsetDescricao();
      } else {
        setDescricao((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PESSOA1:
      return Integer.valueOf(getPessoa1());

    case PESSOA2:
      return Integer.valueOf(getPessoa2());

    case DISTANCIA:
      return Double.valueOf(getDistancia());

    case DIRECIONADO:
      return Boolean.valueOf(isDirecionado());

    case DESCRICAO:
      return getDescricao();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PESSOA1:
      return isSetPessoa1();
    case PESSOA2:
      return isSetPessoa2();
    case DISTANCIA:
      return isSetDistancia();
    case DIRECIONADO:
      return isSetDirecionado();
    case DESCRICAO:
      return isSetDescricao();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Aresta)
      return this.equals((Aresta)that);
    return false;
  }

  public boolean equals(Aresta that) {
    if (that == null)
      return false;

    boolean this_present_pessoa1 = true;
    boolean that_present_pessoa1 = true;
    if (this_present_pessoa1 || that_present_pessoa1) {
      if (!(this_present_pessoa1 && that_present_pessoa1))
        return false;
      if (this.pessoa1 != that.pessoa1)
        return false;
    }

    boolean this_present_pessoa2 = true;
    boolean that_present_pessoa2 = true;
    if (this_present_pessoa2 || that_present_pessoa2) {
      if (!(this_present_pessoa2 && that_present_pessoa2))
        return false;
      if (this.pessoa2 != that.pessoa2)
        return false;
    }

    boolean this_present_distancia = true;
    boolean that_present_distancia = true;
    if (this_present_distancia || that_present_distancia) {
      if (!(this_present_distancia && that_present_distancia))
        return false;
      if (this.distancia != that.distancia)
        return false;
    }

    boolean this_present_direcionado = true;
    boolean that_present_direcionado = true;
    if (this_present_direcionado || that_present_direcionado) {
      if (!(this_present_direcionado && that_present_direcionado))
        return false;
      if (this.direcionado != that.direcionado)
        return false;
    }

    boolean this_present_descricao = true && this.isSetDescricao();
    boolean that_present_descricao = true && that.isSetDescricao();
    if (this_present_descricao || that_present_descricao) {
      if (!(this_present_descricao && that_present_descricao))
        return false;
      if (!this.descricao.equals(that.descricao))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Aresta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPessoa1()).compareTo(other.isSetPessoa1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPessoa1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pessoa1, other.pessoa1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPessoa2()).compareTo(other.isSetPessoa2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPessoa2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pessoa2, other.pessoa2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistancia()).compareTo(other.isSetDistancia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistancia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distancia, other.distancia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirecionado()).compareTo(other.isSetDirecionado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirecionado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direcionado, other.direcionado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescricao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Aresta(");
    boolean first = true;

    sb.append("pessoa1:");
    sb.append(this.pessoa1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pessoa2:");
    sb.append(this.pessoa2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("distancia:");
    sb.append(this.distancia);
    first = false;
    if (!first) sb.append(", ");
    sb.append("direcionado:");
    sb.append(this.direcionado);
    first = false;
    if (!first) sb.append(", ");
    sb.append("descricao:");
    if (this.descricao == null) {
      sb.append("null");
    } else {
      sb.append(this.descricao);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArestaStandardSchemeFactory implements SchemeFactory {
    public ArestaStandardScheme getScheme() {
      return new ArestaStandardScheme();
    }
  }

  private static class ArestaStandardScheme extends StandardScheme<Aresta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Aresta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PESSOA1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pessoa1 = iprot.readI32();
              struct.setPessoa1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PESSOA2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pessoa2 = iprot.readI32();
              struct.setPessoa2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISTANCIA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distancia = iprot.readDouble();
              struct.setDistanciaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIRECIONADO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.direcionado = iprot.readBool();
              struct.setDirecionadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRICAO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descricao = iprot.readString();
              struct.setDescricaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Aresta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PESSOA1_FIELD_DESC);
      oprot.writeI32(struct.pessoa1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PESSOA2_FIELD_DESC);
      oprot.writeI32(struct.pessoa2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISTANCIA_FIELD_DESC);
      oprot.writeDouble(struct.distancia);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIRECIONADO_FIELD_DESC);
      oprot.writeBool(struct.direcionado);
      oprot.writeFieldEnd();
      if (struct.descricao != null) {
        oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
        oprot.writeString(struct.descricao);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArestaTupleSchemeFactory implements SchemeFactory {
    public ArestaTupleScheme getScheme() {
      return new ArestaTupleScheme();
    }
  }

  private static class ArestaTupleScheme extends TupleScheme<Aresta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Aresta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPessoa1()) {
        optionals.set(0);
      }
      if (struct.isSetPessoa2()) {
        optionals.set(1);
      }
      if (struct.isSetDistancia()) {
        optionals.set(2);
      }
      if (struct.isSetDirecionado()) {
        optionals.set(3);
      }
      if (struct.isSetDescricao()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPessoa1()) {
        oprot.writeI32(struct.pessoa1);
      }
      if (struct.isSetPessoa2()) {
        oprot.writeI32(struct.pessoa2);
      }
      if (struct.isSetDistancia()) {
        oprot.writeDouble(struct.distancia);
      }
      if (struct.isSetDirecionado()) {
        oprot.writeBool(struct.direcionado);
      }
      if (struct.isSetDescricao()) {
        oprot.writeString(struct.descricao);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Aresta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pessoa1 = iprot.readI32();
        struct.setPessoa1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.pessoa2 = iprot.readI32();
        struct.setPessoa2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.distancia = iprot.readDouble();
        struct.setDistanciaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.direcionado = iprot.readBool();
        struct.setDirecionadoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.descricao = iprot.readString();
        struct.setDescricaoIsSet(true);
      }
    }
  }

}

